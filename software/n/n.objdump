
n.elf:     file format elf32-littlenios2
n.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020180

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000021f4 memsz 0x000021f4 flags r-x
    LOAD off    0x00003214 vaddr 0x00022214 paddr 0x0002238c align 2**12
         filesz 0x00000178 memsz 0x00000178 flags rw-
    LOAD off    0x00003504 vaddr 0x00022504 paddr 0x00022504 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002038  00020180  00020180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000005c  000221b8  000221b8  000031b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000178  00022214  0002238c  00003214  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00022504  00022504  00003504  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0002261c  0002261c  0000338c  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  0000338c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000458  00000000  00000000  000033b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00013131  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000418a  00000000  00000000  00016941  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004e6f  00000000  00000000  0001aacb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000009e4  00000000  00000000  0001f93c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027ee  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000039af  00000000  00000000  00022b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000264c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003f8  00000000  00000000  00026500  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000284b8  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000284bb  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000284c7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000284c8  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000284c9  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000284d4  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000284df  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  000284ea  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000031  00000000  00000000  000284f1  2**0
                  CONTENTS, READONLY
 26 .jdi          00006093  00000000  00000000  00028522  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020180 l    d  .text	00000000 .text
000221b8 l    d  .rodata	00000000 .rodata
00022214 l    d  .rwdata	00000000 .rwdata
00022504 l    d  .bss	00000000 .bss
0002261c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/Desktop/FPGA/Learn/hdmi_tx_1080p_60fps_nios_ii/software/n_bsp/obj/HAL/src/crt0.o
000201b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000203d0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00022254 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00022338 l     O .rwdata	00000038 i2c_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00021628 l     F .text	000000b4 optional_irq_callback
00021580 l     F .text	00000060 alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00022518 g     O .bss	00000004 alt_instruction_exception_handler
00020cf8 g     F .text	0000002c alt_main
00020320 g     F .text	00000084 _puts_r
00022214 g     O .rwdata	0000003e i2c_hdmi_data
0002251c g     O .bss	00000100 alt_irq
0002238c g       *ABS*	00000000 __flash_rwdata_start
000202d8 g     F .text	00000048 printf
00020ff8 g     F .text	00000078 alt_avalon_i2c_rx_read
00021520 g     F .text	00000014 alt_avalon_i2c_enabled_ints_get
00020ed8 g     F .text	0000004c alt_avalon_i2c_master_config_speed_get
00021b60 g     F .text	0000018c alt_avalon_i2c_master_transmit_using_interrupts
00022158 g     F .text	00000008 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022504 g     O .bss	00000004 errno
0002250c g     O .bss	00000004 alt_argv
0002a370 g       *ABS*	00000000 _gp
000217c8 g     F .text	00000018 alt_avalon_i2c_rx_fifo_threshold_get
00020fb0 g     F .text	00000010 alt_avalon_i2c_is_busy
00020e84 g     F .text	00000054 alt_avalon_i2c_master_config_set
00021ff0 g     F .text	00000070 alt_find_dev
000211ec g     F .text	00000148 alt_avalon_i2c_master_transmit
000203a4 g     F .text	00000010 puts
00022160 g     F .text	00000028 alt_exception_cause_generated_bad_addr
0002029c g     F .text	0000003c _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00020b5c g     F .text	00000064 .hidden __udivsi3
00020de4 g     F .text	00000044 alt_avalon_i2c_enable
00021534 g     F .text	0000004c alt_avalon_i2c_int_disable
00021334 g     F .text	000001b8 alt_avalon_i2c_master_receive
000215e0 g     F .text	00000048 alt_avalon_i2c_int_enable
00022370 g     O .rwdata	00000004 _global_impure_ptr
0002261c g       *ABS*	00000000 __bss_end
000220f0 g     F .text	00000068 alt_iic_isr_register
000214ec g     F .text	00000018 alt_avalon_i2c_int_status_get
000220d8 g     F .text	00000018 alt_ic_irq_enabled
00020dcc g     F .text	00000010 alt_avalon_i2c_register_callback
00022514 g     O .bss	00000004 alt_irq_active
00021abc g     F .text	000000a4 alt_avalon_i2c_init
000200fc g     F .exceptions	00000060 alt_irq_handler
00021f80 g     F .text	00000004 alt_dcache_flush_all
0002238c g       *ABS*	00000000 __ram_rwdata_end
00020d24 g     F .text	00000060 write
000210a0 g     F .text	0000001c alt_avalon_i2c_check_arblost
00021514 g     F .text	0000000c alt_avalon_i2c_int_clear
00022214 g       *ABS*	00000000 __ram_rodata_end
00022378 g     O .rwdata	00000004 jtag_uart_0
0002237c g     O .rwdata	00000008 alt_avalon_i2c_list
00020bc0 g     F .text	0000005c .hidden __umodsi3
0002261c g       *ABS*	00000000 end
0002015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020ddc g     F .text	00000008 alt_avalon_i2c_open
0003001c g       *ABS*	00000000 __alt_stack_pointer
00021cec g     F .text	000000ac alt_avalon_i2c_master_tx
00021ec8 g     F .text	00000030 altera_avalon_jtag_uart_write
0002043c g     F .text	00000518 ___vfprintf_internal_r
00020db0 g     F .text	0000001c alt_avalon_i2c_register_optional_irq_handler
00020180 g     F .text	0000003c _start
00021804 g     F .text	000001a0 alt_avalon_i2c_master_receive_using_interrupts
000217e0 g     F .text	00000024 alt_avalon_i2c_rx_fifo_threshold_set
00020da4 g     F .text	0000000c alt_sys_init
00021d98 g     F .text	00000130 alt_avalon_i2c_master_tx_rx
00020c1c g     F .text	00000028 .hidden __mulsi3
00022214 g       *ABS*	00000000 __ram_rwdata_start
000221b8 g       *ABS*	00000000 __ram_rodata_start
00021ef8 g     F .text	00000088 alt_busy_sleep
00022188 g     F .text	00000030 memcmp
00020fc0 g     F .text	00000038 alt_avalon_i2c_rx_read_available
0002261c g       *ABS*	00000000 __alt_stack_base
00021f84 g     F .text	0000006c alt_dev_llist_insert
000216dc g     F .text	000000ec alt_avalon_i2c_interrupt_transaction_status
00021084 g     F .text	0000001c alt_avalon_i2c_check_nack
0002096c g     F .text	000000a8 __sfvwrite_small_dev
00022504 g       *ABS*	00000000 __bss_start
000201bc g     F .text	000000e0 main
0002107c g     F .text	00000008 alt_avalon_i2c_master_target_set
00022508 g     O .bss	00000004 alt_envp
00021504 g     F .text	00000010 alt_avalon_i2c_int_raw_status_get
00022384 g     O .rwdata	00000004 alt_errno
00020a64 g     F .text	00000080 .hidden __divsi3
000221b8 g       *ABS*	00000000 __flash_rodata_start
00020d84 g     F .text	00000020 alt_irq_init
00020a14 g     F .text	00000050 _write_r
00022374 g     O .rwdata	00000004 _impure_ptr
00022510 g     O .bss	00000004 alt_argc
00021070 g     F .text	0000000c alt_avalon_i2c_master_target_get
0002117c g     F .text	00000070 alt_avalon_i2c_send_address
00020020 g       .exceptions	00000000 alt_irq_entry
00020020 g       *ABS*	00000000 __ram_exceptions_start
00021a98 g     F .text	00000024 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00022064 g     F .text	00000004 alt_ic_isr_register
00020e28 g     F .text	00000018 alt_avalon_i2c_disable
0002238c g       *ABS*	00000000 _edata
0002261c g       *ABS*	00000000 _end
00020180 g       *ABS*	00000000 __ram_exceptions_end
00020e40 g     F .text	00000044 alt_avalon_i2c_master_config_get
000220a0 g     F .text	00000038 alt_ic_irq_disable
00020ae4 g     F .text	00000078 .hidden __modsi3
0003001c g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020f24 g     F .text	0000008c alt_avalon_i2c_master_config_speed_set
000210bc g     F .text	000000c0 alt_avalon_i2c_cmd_write
0002000c g       .entry	00000000 _exit
000203b4 g     F .text	0000001c strlen
00022060 g     F .text	00000004 alt_icache_flush_all
00022388 g     O .rwdata	00000004 alt_priority_mask
00022068 g     F .text	00000038 alt_ic_irq_enable
00020954 g     F .text	00000018 __vfprintf_internal
00021a80 g     F .text	00000018 alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00020c44 g     F .text	000000b4 alt_load
000219a4 g     F .text	000000dc alt_avalon_i2c_master_rx



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406014 	ori	at,at,384
    jmp r1
   20008:	0800683a 	jmp	at

0002000c <_exit>:
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	002015c0 	call	2015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defffe04 	addi	sp,sp,-8
   20100:	dfc00115 	stw	ra,4(sp)
   20104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2010c:	040000b4 	movhi	r16,2
   20110:	84094704 	addi	r16,r16,9500
    i = 0;
   20114:	0005883a 	mov	r2,zero
    mask = 1;
   20118:	00c00044 	movi	r3,1
      if (active & mask)
   2011c:	20ca703a 	and	r5,r4,r3
   20120:	28000b26 	beq	r5,zero,20150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
   20124:	100490fa 	slli	r2,r2,3
   20128:	8085883a 	add	r2,r16,r2
   2012c:	10c00017 	ldw	r3,0(r2)
   20130:	11000117 	ldw	r4,4(r2)
   20134:	183ee83a 	callr	r3
   20138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   2013c:	203ff51e 	bne	r4,zero,20114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   20140:	dfc00117 	ldw	ra,4(sp)
   20144:	dc000017 	ldw	r16,0(sp)
   20148:	dec00204 	addi	sp,sp,8
   2014c:	f800283a 	ret
      mask <<= 1;
   20150:	1806907a 	slli	r3,r3,1
      i++;
   20154:	10800044 	addi	r2,r2,1
      if (active & mask)
   20158:	003ff006 	br	2011c <alt_irq_handler+0x20>

0002015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   2015c:	d0a06a17 	ldw	r2,-32344(gp)
   20160:	10000426 	beq	r2,zero,20174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20164:	200b883a 	mov	r5,r4
   20168:	000d883a 	mov	r6,zero
   2016c:	013fffc4 	movi	r4,-1
   20170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   20178:	0005883a 	mov	r2,zero
   2017c:	f800283a 	ret

Disassembly of section .text:

00020180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20180:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20184:	dec00714 	ori	sp,sp,28
    movhi gp, %hi(_gp)
   20188:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2018c:	d6a8dc14 	ori	gp,gp,41840
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20190:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20194:	10894114 	ori	r2,r2,9476

    movhi r3, %hi(__bss_end)
   20198:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2019c:	18c98714 	ori	r3,r3,9756

    beq r2, r3, 1f
   201a0:	10c00326 	beq	r2,r3,201b0 <_start+0x30>

0:
    stw zero, (r2)
   201a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201ac:	10fffd36 	bltu	r2,r3,201a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201b0:	0020c440 	call	20c44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201b4:	0020cf80 	call	20cf8 <alt_main>

000201b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201b8:	003fff06 	br	201b8 <alt_after_alt_main>

000201bc <main>:
		{0xFA, 0x7D}	//Nbr of times to look for good phase
};

int main()
{ 
  printf("Hello from Nios II!\n");
   201bc:	010000b4 	movhi	r4,2
{ 
   201c0:	defffb04 	addi	sp,sp,-20
  printf("Hello from Nios II!\n");
   201c4:	21086e04 	addi	r4,r4,8632
{ 
   201c8:	dfc00415 	stw	ra,16(sp)
   201cc:	dc800315 	stw	r18,12(sp)
   201d0:	dc400215 	stw	r17,8(sp)
   201d4:	dc000115 	stw	r16,4(sp)
  printf("Hello from Nios II!\n");
   201d8:	00203a40 	call	203a4 <puts>

  ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
  ALT_AVALON_I2C_STATUS_CODE status;

  //get a pointer to the avalon i2c instance
  i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
   201dc:	010000b4 	movhi	r4,2
   201e0:	21087304 	addi	r4,r4,8652
   201e4:	0020ddc0 	call	20ddc <alt_avalon_i2c_open>
  if (NULL==i2c_dev)
   201e8:	10000a1e 	bne	r2,zero,20214 <main+0x58>
  {
	  printf("Error: Cannot find /dev/i2c_0\n");
   201ec:	010000b4 	movhi	r4,2
   201f0:	21087604 	addi	r4,r4,8664
   201f4:	00203a40 	call	203a4 <puts>

	  status = alt_avalon_i2c_master_tx(i2c_dev, data, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
	  if (status != ALT_AVALON_I2C_SUCCESS)
	  {
		  printf("%d, I2C failed\n", i);
		  return 1; //FAIL
   201f8:	00800044 	movi	r2,1
  //read I2C
  //status=alt_avalon_i2c_master_tx_rx(i2c_dev, txbuffer, 2, rxbuffer, 0x10, ALT_AVALON_I2C_NO_INTERRUPTS);
  //if (status != ALT_AVALON_I2C_SUCCESS) return 1; //FAIL

  return 0;
}
   201fc:	dfc00417 	ldw	ra,16(sp)
   20200:	dc800317 	ldw	r18,12(sp)
   20204:	dc400217 	ldw	r17,8(sp)
   20208:	dc000117 	ldw	r16,4(sp)
   2020c:	dec00504 	addi	sp,sp,20
   20210:	f800283a 	ret
  alt_avalon_i2c_master_target_set(i2c_dev, HDMI_I2C_ADDRESS);
   20214:	01400e44 	movi	r5,57
   20218:	1009883a 	mov	r4,r2
   2021c:	040000b4 	movhi	r16,2
   20220:	1025883a 	mov	r18,r2
   20224:	84088504 	addi	r16,r16,8724
   20228:	002107c0 	call	2107c <alt_avalon_i2c_master_target_set>
   2022c:	0023883a 	mov	r17,zero
	  alt_u8 data[2] = {i2c_hdmi_data[i][0], i2c_hdmi_data[i][1]};
   20230:	80800003 	ldbu	r2,0(r16)
	  status = alt_avalon_i2c_master_tx(i2c_dev, data, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
   20234:	000f883a 	mov	r7,zero
   20238:	01800084 	movi	r6,2
	  alt_u8 data[2] = {i2c_hdmi_data[i][0], i2c_hdmi_data[i][1]};
   2023c:	d8800085 	stb	r2,2(sp)
   20240:	80800043 	ldbu	r2,1(r16)
	  status = alt_avalon_i2c_master_tx(i2c_dev, data, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
   20244:	d9400084 	addi	r5,sp,2
   20248:	9009883a 	mov	r4,r18
	  alt_u8 data[2] = {i2c_hdmi_data[i][0], i2c_hdmi_data[i][1]};
   2024c:	d88000c5 	stb	r2,3(sp)
	  status = alt_avalon_i2c_master_tx(i2c_dev, data, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
   20250:	0021cec0 	call	21cec <alt_avalon_i2c_master_tx>
	  if (status != ALT_AVALON_I2C_SUCCESS)
   20254:	10000526 	beq	r2,zero,2026c <main+0xb0>
		  printf("%d, I2C failed\n", i);
   20258:	010000b4 	movhi	r4,2
   2025c:	880b883a 	mov	r5,r17
   20260:	21087e04 	addi	r4,r4,8696
   20264:	00202d80 	call	202d8 <printf>
   20268:	003fe306 	br	201f8 <main+0x3c>
   2026c:	8c400044 	addi	r17,r17,1
  for (alt_u8 i = 0; i < HDMI_I2C_DATE_BUFFER; i++)
   20270:	888007d8 	cmpnei	r2,r17,31
   20274:	84000084 	addi	r16,r16,2
   20278:	103fed1e 	bne	r2,zero,20230 <main+0x74>
  IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 1);
   2027c:	00c00044 	movi	r3,1
   20280:	00800134 	movhi	r2,4
   20284:	10c41035 	stwio	r3,4160(r2)
  printf("Finish\n");
   20288:	010000b4 	movhi	r4,2
   2028c:	21088204 	addi	r4,r4,8712
   20290:	00203a40 	call	203a4 <puts>
  return 0;
   20294:	0005883a 	mov	r2,zero
   20298:	003fd806 	br	201fc <main+0x40>

0002029c <_printf_r>:
   2029c:	defffd04 	addi	sp,sp,-12
   202a0:	dfc00015 	stw	ra,0(sp)
   202a4:	d9800115 	stw	r6,4(sp)
   202a8:	d9c00215 	stw	r7,8(sp)
   202ac:	21800217 	ldw	r6,8(r4)
   202b0:	008000b4 	movhi	r2,2
   202b4:	10825b04 	addi	r2,r2,2412
   202b8:	30800115 	stw	r2,4(r6)
   202bc:	280d883a 	mov	r6,r5
   202c0:	21400217 	ldw	r5,8(r4)
   202c4:	d9c00104 	addi	r7,sp,4
   202c8:	002043c0 	call	2043c <___vfprintf_internal_r>
   202cc:	dfc00017 	ldw	ra,0(sp)
   202d0:	dec00304 	addi	sp,sp,12
   202d4:	f800283a 	ret

000202d8 <printf>:
   202d8:	defffc04 	addi	sp,sp,-16
   202dc:	dfc00015 	stw	ra,0(sp)
   202e0:	d9400115 	stw	r5,4(sp)
   202e4:	d9800215 	stw	r6,8(sp)
   202e8:	d9c00315 	stw	r7,12(sp)
   202ec:	008000b4 	movhi	r2,2
   202f0:	10c8dd17 	ldw	r3,9076(r2)
   202f4:	008000b4 	movhi	r2,2
   202f8:	10825b04 	addi	r2,r2,2412
   202fc:	19400217 	ldw	r5,8(r3)
   20300:	d9800104 	addi	r6,sp,4
   20304:	28800115 	stw	r2,4(r5)
   20308:	200b883a 	mov	r5,r4
   2030c:	19000217 	ldw	r4,8(r3)
   20310:	00209540 	call	20954 <__vfprintf_internal>
   20314:	dfc00017 	ldw	ra,0(sp)
   20318:	dec00404 	addi	sp,sp,16
   2031c:	f800283a 	ret

00020320 <_puts_r>:
   20320:	defffd04 	addi	sp,sp,-12
   20324:	dc000015 	stw	r16,0(sp)
   20328:	2021883a 	mov	r16,r4
   2032c:	2809883a 	mov	r4,r5
   20330:	dfc00215 	stw	ra,8(sp)
   20334:	dc400115 	stw	r17,4(sp)
   20338:	2823883a 	mov	r17,r5
   2033c:	00203b40 	call	203b4 <strlen>
   20340:	81400217 	ldw	r5,8(r16)
   20344:	00c000b4 	movhi	r3,2
   20348:	18c25b04 	addi	r3,r3,2412
   2034c:	28c00115 	stw	r3,4(r5)
   20350:	100f883a 	mov	r7,r2
   20354:	880d883a 	mov	r6,r17
   20358:	8009883a 	mov	r4,r16
   2035c:	002096c0 	call	2096c <__sfvwrite_small_dev>
   20360:	10ffffe0 	cmpeqi	r3,r2,-1
   20364:	18000a1e 	bne	r3,zero,20390 <_puts_r+0x70>
   20368:	80800217 	ldw	r2,8(r16)
   2036c:	81400217 	ldw	r5,8(r16)
   20370:	018000b4 	movhi	r6,2
   20374:	10800117 	ldw	r2,4(r2)
   20378:	01c00044 	movi	r7,1
   2037c:	31888404 	addi	r6,r6,8720
   20380:	8009883a 	mov	r4,r16
   20384:	103ee83a 	callr	r2
   20388:	10bfffe0 	cmpeqi	r2,r2,-1
   2038c:	0085c83a 	sub	r2,zero,r2
   20390:	dfc00217 	ldw	ra,8(sp)
   20394:	dc400117 	ldw	r17,4(sp)
   20398:	dc000017 	ldw	r16,0(sp)
   2039c:	dec00304 	addi	sp,sp,12
   203a0:	f800283a 	ret

000203a4 <puts>:
   203a4:	008000b4 	movhi	r2,2
   203a8:	200b883a 	mov	r5,r4
   203ac:	1108dd17 	ldw	r4,9076(r2)
   203b0:	00203201 	jmpi	20320 <_puts_r>

000203b4 <strlen>:
   203b4:	2005883a 	mov	r2,r4
   203b8:	10c00007 	ldb	r3,0(r2)
   203bc:	1800021e 	bne	r3,zero,203c8 <strlen+0x14>
   203c0:	1105c83a 	sub	r2,r2,r4
   203c4:	f800283a 	ret
   203c8:	10800044 	addi	r2,r2,1
   203cc:	003ffa06 	br	203b8 <strlen+0x4>

000203d0 <print_repeat>:
   203d0:	defffb04 	addi	sp,sp,-20
   203d4:	dc800315 	stw	r18,12(sp)
   203d8:	dc400215 	stw	r17,8(sp)
   203dc:	dc000115 	stw	r16,4(sp)
   203e0:	dfc00415 	stw	ra,16(sp)
   203e4:	2025883a 	mov	r18,r4
   203e8:	2823883a 	mov	r17,r5
   203ec:	d9800005 	stb	r6,0(sp)
   203f0:	3821883a 	mov	r16,r7
   203f4:	04000716 	blt	zero,r16,20414 <print_repeat+0x44>
   203f8:	0005883a 	mov	r2,zero
   203fc:	dfc00417 	ldw	ra,16(sp)
   20400:	dc800317 	ldw	r18,12(sp)
   20404:	dc400217 	ldw	r17,8(sp)
   20408:	dc000117 	ldw	r16,4(sp)
   2040c:	dec00504 	addi	sp,sp,20
   20410:	f800283a 	ret
   20414:	88800117 	ldw	r2,4(r17)
   20418:	01c00044 	movi	r7,1
   2041c:	d80d883a 	mov	r6,sp
   20420:	880b883a 	mov	r5,r17
   20424:	9009883a 	mov	r4,r18
   20428:	103ee83a 	callr	r2
   2042c:	843fffc4 	addi	r16,r16,-1
   20430:	103ff026 	beq	r2,zero,203f4 <print_repeat+0x24>
   20434:	00bfffc4 	movi	r2,-1
   20438:	003ff006 	br	203fc <print_repeat+0x2c>

0002043c <___vfprintf_internal_r>:
   2043c:	deffe604 	addi	sp,sp,-104
   20440:	df001815 	stw	fp,96(sp)
   20444:	ddc01715 	stw	r23,92(sp)
   20448:	dd801615 	stw	r22,88(sp)
   2044c:	dd001415 	stw	r20,80(sp)
   20450:	dcc01315 	stw	r19,76(sp)
   20454:	dc801215 	stw	r18,72(sp)
   20458:	dc401115 	stw	r17,68(sp)
   2045c:	dc001015 	stw	r16,64(sp)
   20460:	dfc01915 	stw	ra,100(sp)
   20464:	dd401515 	stw	r21,84(sp)
   20468:	2021883a 	mov	r16,r4
   2046c:	282d883a 	mov	r22,r5
   20470:	d9800515 	stw	r6,20(sp)
   20474:	382f883a 	mov	r23,r7
   20478:	0039883a 	mov	fp,zero
   2047c:	d8000215 	stw	zero,8(sp)
   20480:	0027883a 	mov	r19,zero
   20484:	0029883a 	mov	r20,zero
   20488:	0025883a 	mov	r18,zero
   2048c:	0023883a 	mov	r17,zero
   20490:	d8000115 	stw	zero,4(sp)
   20494:	d8000015 	stw	zero,0(sp)
   20498:	0005883a 	mov	r2,zero
   2049c:	00000506 	br	204b4 <___vfprintf_internal_r+0x78>
   204a0:	11800060 	cmpeqi	r6,r2,1
   204a4:	3000331e 	bne	r6,zero,20574 <___vfprintf_internal_r+0x138>
   204a8:	11800088 	cmpgei	r6,r2,2
   204ac:	30000a1e 	bne	r6,zero,204d8 <___vfprintf_internal_r+0x9c>
   204b0:	10001826 	beq	r2,zero,20514 <___vfprintf_internal_r+0xd8>
   204b4:	d8c00517 	ldw	r3,20(sp)
   204b8:	18c00044 	addi	r3,r3,1
   204bc:	197fffc3 	ldbu	r5,-1(r3)
   204c0:	d8c00515 	stw	r3,20(sp)
   204c4:	29003fcc 	andi	r4,r5,255
   204c8:	2100201c 	xori	r4,r4,128
   204cc:	213fe004 	addi	r4,r4,-128
   204d0:	203ff31e 	bne	r4,zero,204a0 <___vfprintf_internal_r+0x64>
   204d4:	00001a06 	br	20540 <___vfprintf_internal_r+0x104>
   204d8:	118000a0 	cmpeqi	r6,r2,2
   204dc:	3000291e 	bne	r6,zero,20584 <___vfprintf_internal_r+0x148>
   204e0:	118000e0 	cmpeqi	r6,r2,3
   204e4:	303ff326 	beq	r6,zero,204b4 <___vfprintf_internal_r+0x78>
   204e8:	297ff404 	addi	r5,r5,-48
   204ec:	29403fcc 	andi	r5,r5,255
   204f0:	298002a8 	cmpgeui	r6,r5,10
   204f4:	3000391e 	bne	r6,zero,205dc <___vfprintf_internal_r+0x1a0>
   204f8:	913fffe0 	cmpeqi	r4,r18,-1
   204fc:	2000351e 	bne	r4,zero,205d4 <___vfprintf_internal_r+0x198>
   20500:	900890ba 	slli	r4,r18,2
   20504:	24a5883a 	add	r18,r4,r18
   20508:	9024907a 	slli	r18,r18,1
   2050c:	2ca5883a 	add	r18,r5,r18
   20510:	003fe806 	br	204b4 <___vfprintf_internal_r+0x78>
   20514:	21000960 	cmpeqi	r4,r4,37
   20518:	2000fe1e 	bne	r4,zero,20914 <___vfprintf_internal_r+0x4d8>
   2051c:	b0800117 	ldw	r2,4(r22)
   20520:	d9400805 	stb	r5,32(sp)
   20524:	01c00044 	movi	r7,1
   20528:	d9800804 	addi	r6,sp,32
   2052c:	b00b883a 	mov	r5,r22
   20530:	8009883a 	mov	r4,r16
   20534:	103ee83a 	callr	r2
   20538:	10001e26 	beq	r2,zero,205b4 <___vfprintf_internal_r+0x178>
   2053c:	073fffc4 	movi	fp,-1
   20540:	e005883a 	mov	r2,fp
   20544:	dfc01917 	ldw	ra,100(sp)
   20548:	df001817 	ldw	fp,96(sp)
   2054c:	ddc01717 	ldw	r23,92(sp)
   20550:	dd801617 	ldw	r22,88(sp)
   20554:	dd401517 	ldw	r21,84(sp)
   20558:	dd001417 	ldw	r20,80(sp)
   2055c:	dcc01317 	ldw	r19,76(sp)
   20560:	dc801217 	ldw	r18,72(sp)
   20564:	dc401117 	ldw	r17,68(sp)
   20568:	dc001017 	ldw	r16,64(sp)
   2056c:	dec01a04 	addi	sp,sp,104
   20570:	f800283a 	ret
   20574:	20800c20 	cmpeqi	r2,r4,48
   20578:	1000ef1e 	bne	r2,zero,20938 <___vfprintf_internal_r+0x4fc>
   2057c:	20800958 	cmpnei	r2,r4,37
   20580:	103fe626 	beq	r2,zero,2051c <___vfprintf_internal_r+0xe0>
   20584:	29bff404 	addi	r6,r5,-48
   20588:	31803fcc 	andi	r6,r6,255
   2058c:	308002a8 	cmpgeui	r2,r6,10
   20590:	10000c1e 	bne	r2,zero,205c4 <___vfprintf_internal_r+0x188>
   20594:	88bfffe0 	cmpeqi	r2,r17,-1
   20598:	1000081e 	bne	r2,zero,205bc <___vfprintf_internal_r+0x180>
   2059c:	880490ba 	slli	r2,r17,2
   205a0:	1463883a 	add	r17,r2,r17
   205a4:	8822907a 	slli	r17,r17,1
   205a8:	3463883a 	add	r17,r6,r17
   205ac:	00800084 	movi	r2,2
   205b0:	003fc006 	br	204b4 <___vfprintf_internal_r+0x78>
   205b4:	e7000044 	addi	fp,fp,1
   205b8:	003fbe06 	br	204b4 <___vfprintf_internal_r+0x78>
   205bc:	0023883a 	mov	r17,zero
   205c0:	003ff906 	br	205a8 <___vfprintf_internal_r+0x16c>
   205c4:	20800ba0 	cmpeqi	r2,r4,46
   205c8:	1000e01e 	bne	r2,zero,2094c <___vfprintf_internal_r+0x510>
   205cc:	00800084 	movi	r2,2
   205d0:	003fc506 	br	204e8 <___vfprintf_internal_r+0xac>
   205d4:	0025883a 	mov	r18,zero
   205d8:	003fcc06 	br	2050c <___vfprintf_internal_r+0xd0>
   205dc:	20801b20 	cmpeqi	r2,r4,108
   205e0:	1000d81e 	bne	r2,zero,20944 <___vfprintf_internal_r+0x508>
   205e4:	90bfffe0 	cmpeqi	r2,r18,-1
   205e8:	10000e1e 	bne	r2,zero,20624 <___vfprintf_internal_r+0x1e8>
   205ec:	d8000015 	stw	zero,0(sp)
   205f0:	20801a60 	cmpeqi	r2,r4,105
   205f4:	1000201e 	bne	r2,zero,20678 <___vfprintf_internal_r+0x23c>
   205f8:	20801a88 	cmpgei	r2,r4,106
   205fc:	10000b1e 	bne	r2,zero,2062c <___vfprintf_internal_r+0x1f0>
   20600:	208018e0 	cmpeqi	r2,r4,99
   20604:	1000911e 	bne	r2,zero,2084c <___vfprintf_internal_r+0x410>
   20608:	20801920 	cmpeqi	r2,r4,100
   2060c:	10001a1e 	bne	r2,zero,20678 <___vfprintf_internal_r+0x23c>
   20610:	21001620 	cmpeqi	r4,r4,88
   20614:	203fa026 	beq	r4,zero,20498 <___vfprintf_internal_r+0x5c>
   20618:	00800044 	movi	r2,1
   2061c:	d8800215 	stw	r2,8(sp)
   20620:	00001306 	br	20670 <___vfprintf_internal_r+0x234>
   20624:	04800044 	movi	r18,1
   20628:	003ff106 	br	205f0 <___vfprintf_internal_r+0x1b4>
   2062c:	20801ce0 	cmpeqi	r2,r4,115
   20630:	10009d1e 	bne	r2,zero,208a8 <___vfprintf_internal_r+0x46c>
   20634:	20801d08 	cmpgei	r2,r4,116
   20638:	1000091e 	bne	r2,zero,20660 <___vfprintf_internal_r+0x224>
   2063c:	21001be0 	cmpeqi	r4,r4,111
   20640:	203f9526 	beq	r4,zero,20498 <___vfprintf_internal_r+0x5c>
   20644:	05000204 	movi	r20,8
   20648:	b8800104 	addi	r2,r23,4
   2064c:	d8800415 	stw	r2,16(sp)
   20650:	bd400017 	ldw	r21,0(r23)
   20654:	0027883a 	mov	r19,zero
   20658:	0007883a 	mov	r3,zero
   2065c:	00001006 	br	206a0 <___vfprintf_internal_r+0x264>
   20660:	20801d60 	cmpeqi	r2,r4,117
   20664:	103ff81e 	bne	r2,zero,20648 <___vfprintf_internal_r+0x20c>
   20668:	21001e20 	cmpeqi	r4,r4,120
   2066c:	203f8a26 	beq	r4,zero,20498 <___vfprintf_internal_r+0x5c>
   20670:	05000404 	movi	r20,16
   20674:	003ff406 	br	20648 <___vfprintf_internal_r+0x20c>
   20678:	b8800104 	addi	r2,r23,4
   2067c:	d8800415 	stw	r2,16(sp)
   20680:	983ff126 	beq	r19,zero,20648 <___vfprintf_internal_r+0x20c>
   20684:	bd400017 	ldw	r21,0(r23)
   20688:	a8000216 	blt	r21,zero,20694 <___vfprintf_internal_r+0x258>
   2068c:	04c00044 	movi	r19,1
   20690:	003ff106 	br	20658 <___vfprintf_internal_r+0x21c>
   20694:	056bc83a 	sub	r21,zero,r21
   20698:	04c00044 	movi	r19,1
   2069c:	00c00044 	movi	r3,1
   206a0:	ddc00804 	addi	r23,sp,32
   206a4:	b80d883a 	mov	r6,r23
   206a8:	a8002e1e 	bne	r21,zero,20764 <___vfprintf_internal_r+0x328>
   206ac:	b985c83a 	sub	r2,r23,r6
   206b0:	d8800315 	stw	r2,12(sp)
   206b4:	9085c83a 	sub	r2,r18,r2
   206b8:	0080090e 	bge	zero,r2,206e0 <___vfprintf_internal_r+0x2a4>
   206bc:	b885883a 	add	r2,r23,r2
   206c0:	d9001004 	addi	r4,sp,64
   206c4:	b900042e 	bgeu	r23,r4,206d8 <___vfprintf_internal_r+0x29c>
   206c8:	bdc00044 	addi	r23,r23,1
   206cc:	01000c04 	movi	r4,48
   206d0:	b93fffc5 	stb	r4,-1(r23)
   206d4:	b8bffa1e 	bne	r23,r2,206c0 <___vfprintf_internal_r+0x284>
   206d8:	b985c83a 	sub	r2,r23,r6
   206dc:	d8800315 	stw	r2,12(sp)
   206e0:	d8800317 	ldw	r2,12(sp)
   206e4:	1895883a 	add	r10,r3,r2
   206e8:	d8800017 	ldw	r2,0(sp)
   206ec:	8aabc83a 	sub	r21,r17,r10
   206f0:	10003526 	beq	r2,zero,207c8 <___vfprintf_internal_r+0x38c>
   206f4:	18000a26 	beq	r3,zero,20720 <___vfprintf_internal_r+0x2e4>
   206f8:	00800b44 	movi	r2,45
   206fc:	d88007c5 	stb	r2,31(sp)
   20700:	b0800117 	ldw	r2,4(r22)
   20704:	01c00044 	movi	r7,1
   20708:	d98007c4 	addi	r6,sp,31
   2070c:	b00b883a 	mov	r5,r22
   20710:	8009883a 	mov	r4,r16
   20714:	103ee83a 	callr	r2
   20718:	103f881e 	bne	r2,zero,2053c <___vfprintf_internal_r+0x100>
   2071c:	e7000044 	addi	fp,fp,1
   20720:	0540070e 	bge	zero,r21,20740 <___vfprintf_internal_r+0x304>
   20724:	a80f883a 	mov	r7,r21
   20728:	01800c04 	movi	r6,48
   2072c:	b00b883a 	mov	r5,r22
   20730:	8009883a 	mov	r4,r16
   20734:	00203d00 	call	203d0 <print_repeat>
   20738:	103f801e 	bne	r2,zero,2053c <___vfprintf_internal_r+0x100>
   2073c:	e579883a 	add	fp,fp,r21
   20740:	d8800317 	ldw	r2,12(sp)
   20744:	e5f9883a 	add	fp,fp,r23
   20748:	15ebc83a 	sub	r21,r2,r23
   2074c:	adc5883a 	add	r2,r21,r23
   20750:	e5c7c83a 	sub	r3,fp,r23
   20754:	00803216 	blt	zero,r2,20820 <___vfprintf_internal_r+0x3e4>
   20758:	ddc00417 	ldw	r23,16(sp)
   2075c:	1839883a 	mov	fp,r3
   20760:	003f4d06 	br	20498 <___vfprintf_internal_r+0x5c>
   20764:	a00b883a 	mov	r5,r20
   20768:	a809883a 	mov	r4,r21
   2076c:	d8c00615 	stw	r3,24(sp)
   20770:	0020b5c0 	call	20b5c <__udivsi3>
   20774:	1009883a 	mov	r4,r2
   20778:	a00b883a 	mov	r5,r20
   2077c:	d8800315 	stw	r2,12(sp)
   20780:	0020c1c0 	call	20c1c <__mulsi3>
   20784:	a885c83a 	sub	r2,r21,r2
   20788:	11000288 	cmpgei	r4,r2,10
   2078c:	d9c00317 	ldw	r7,12(sp)
   20790:	d8c00617 	ldw	r3,24(sp)
   20794:	d9800804 	addi	r6,sp,32
   20798:	2000051e 	bne	r4,zero,207b0 <___vfprintf_internal_r+0x374>
   2079c:	10800c04 	addi	r2,r2,48
   207a0:	bdc00044 	addi	r23,r23,1
   207a4:	b8bfffc5 	stb	r2,-1(r23)
   207a8:	382b883a 	mov	r21,r7
   207ac:	003fbe06 	br	206a8 <___vfprintf_internal_r+0x26c>
   207b0:	d9000217 	ldw	r4,8(sp)
   207b4:	20000226 	beq	r4,zero,207c0 <___vfprintf_internal_r+0x384>
   207b8:	10800dc4 	addi	r2,r2,55
   207bc:	003ff806 	br	207a0 <___vfprintf_internal_r+0x364>
   207c0:	108015c4 	addi	r2,r2,87
   207c4:	003ff606 	br	207a0 <___vfprintf_internal_r+0x364>
   207c8:	0540090e 	bge	zero,r21,207f0 <___vfprintf_internal_r+0x3b4>
   207cc:	a80f883a 	mov	r7,r21
   207d0:	01800804 	movi	r6,32
   207d4:	b00b883a 	mov	r5,r22
   207d8:	8009883a 	mov	r4,r16
   207dc:	d8c00615 	stw	r3,24(sp)
   207e0:	00203d00 	call	203d0 <print_repeat>
   207e4:	103f551e 	bne	r2,zero,2053c <___vfprintf_internal_r+0x100>
   207e8:	d8c00617 	ldw	r3,24(sp)
   207ec:	e579883a 	add	fp,fp,r21
   207f0:	183fd326 	beq	r3,zero,20740 <___vfprintf_internal_r+0x304>
   207f4:	00800b44 	movi	r2,45
   207f8:	d88007c5 	stb	r2,31(sp)
   207fc:	b0800117 	ldw	r2,4(r22)
   20800:	01c00044 	movi	r7,1
   20804:	d98007c4 	addi	r6,sp,31
   20808:	b00b883a 	mov	r5,r22
   2080c:	8009883a 	mov	r4,r16
   20810:	103ee83a 	callr	r2
   20814:	103f491e 	bne	r2,zero,2053c <___vfprintf_internal_r+0x100>
   20818:	e7000044 	addi	fp,fp,1
   2081c:	003fc806 	br	20740 <___vfprintf_internal_r+0x304>
   20820:	bdffffc4 	addi	r23,r23,-1
   20824:	b8800003 	ldbu	r2,0(r23)
   20828:	01c00044 	movi	r7,1
   2082c:	d98007c4 	addi	r6,sp,31
   20830:	d88007c5 	stb	r2,31(sp)
   20834:	b0800117 	ldw	r2,4(r22)
   20838:	b00b883a 	mov	r5,r22
   2083c:	8009883a 	mov	r4,r16
   20840:	103ee83a 	callr	r2
   20844:	103fc126 	beq	r2,zero,2074c <___vfprintf_internal_r+0x310>
   20848:	003f3c06 	br	2053c <___vfprintf_internal_r+0x100>
   2084c:	88800090 	cmplti	r2,r17,2
   20850:	1000081e 	bne	r2,zero,20874 <___vfprintf_internal_r+0x438>
   20854:	8d7fffc4 	addi	r21,r17,-1
   20858:	a80f883a 	mov	r7,r21
   2085c:	01800804 	movi	r6,32
   20860:	b00b883a 	mov	r5,r22
   20864:	8009883a 	mov	r4,r16
   20868:	00203d00 	call	203d0 <print_repeat>
   2086c:	103f331e 	bne	r2,zero,2053c <___vfprintf_internal_r+0x100>
   20870:	e579883a 	add	fp,fp,r21
   20874:	b8800017 	ldw	r2,0(r23)
   20878:	01c00044 	movi	r7,1
   2087c:	d9800804 	addi	r6,sp,32
   20880:	d8800805 	stb	r2,32(sp)
   20884:	b0800117 	ldw	r2,4(r22)
   20888:	b00b883a 	mov	r5,r22
   2088c:	8009883a 	mov	r4,r16
   20890:	bd400104 	addi	r21,r23,4
   20894:	103ee83a 	callr	r2
   20898:	103f281e 	bne	r2,zero,2053c <___vfprintf_internal_r+0x100>
   2089c:	e7000044 	addi	fp,fp,1
   208a0:	a82f883a 	mov	r23,r21
   208a4:	003f0306 	br	204b4 <___vfprintf_internal_r+0x78>
   208a8:	bd400017 	ldw	r21,0(r23)
   208ac:	b8800104 	addi	r2,r23,4
   208b0:	d8800315 	stw	r2,12(sp)
   208b4:	a809883a 	mov	r4,r21
   208b8:	00203b40 	call	203b4 <strlen>
   208bc:	8895c83a 	sub	r10,r17,r2
   208c0:	102f883a 	mov	r23,r2
   208c4:	0280090e 	bge	zero,r10,208ec <___vfprintf_internal_r+0x4b0>
   208c8:	500f883a 	mov	r7,r10
   208cc:	01800804 	movi	r6,32
   208d0:	b00b883a 	mov	r5,r22
   208d4:	8009883a 	mov	r4,r16
   208d8:	da800415 	stw	r10,16(sp)
   208dc:	00203d00 	call	203d0 <print_repeat>
   208e0:	103f161e 	bne	r2,zero,2053c <___vfprintf_internal_r+0x100>
   208e4:	da800417 	ldw	r10,16(sp)
   208e8:	e2b9883a 	add	fp,fp,r10
   208ec:	b0800117 	ldw	r2,4(r22)
   208f0:	b80f883a 	mov	r7,r23
   208f4:	a80d883a 	mov	r6,r21
   208f8:	b00b883a 	mov	r5,r22
   208fc:	8009883a 	mov	r4,r16
   20900:	103ee83a 	callr	r2
   20904:	103f0d1e 	bne	r2,zero,2053c <___vfprintf_internal_r+0x100>
   20908:	e5f9883a 	add	fp,fp,r23
   2090c:	ddc00317 	ldw	r23,12(sp)
   20910:	003ee806 	br	204b4 <___vfprintf_internal_r+0x78>
   20914:	d8000215 	stw	zero,8(sp)
   20918:	d8000115 	stw	zero,4(sp)
   2091c:	d8000015 	stw	zero,0(sp)
   20920:	04c00044 	movi	r19,1
   20924:	05000284 	movi	r20,10
   20928:	04bfffc4 	movi	r18,-1
   2092c:	047fffc4 	movi	r17,-1
   20930:	00800044 	movi	r2,1
   20934:	003edf06 	br	204b4 <___vfprintf_internal_r+0x78>
   20938:	00800044 	movi	r2,1
   2093c:	d8800015 	stw	r2,0(sp)
   20940:	003f1a06 	br	205ac <___vfprintf_internal_r+0x170>
   20944:	00800044 	movi	r2,1
   20948:	d8800115 	stw	r2,4(sp)
   2094c:	008000c4 	movi	r2,3
   20950:	003ed806 	br	204b4 <___vfprintf_internal_r+0x78>

00020954 <__vfprintf_internal>:
   20954:	008000b4 	movhi	r2,2
   20958:	300f883a 	mov	r7,r6
   2095c:	280d883a 	mov	r6,r5
   20960:	200b883a 	mov	r5,r4
   20964:	1108dd17 	ldw	r4,9076(r2)
   20968:	002043c1 	jmpi	2043c <___vfprintf_internal_r>

0002096c <__sfvwrite_small_dev>:
   2096c:	2880000b 	ldhu	r2,0(r5)
   20970:	1080020c 	andi	r2,r2,8
   20974:	10002526 	beq	r2,zero,20a0c <__sfvwrite_small_dev+0xa0>
   20978:	2880008f 	ldh	r2,2(r5)
   2097c:	defffb04 	addi	sp,sp,-20
   20980:	dcc00315 	stw	r19,12(sp)
   20984:	dc800215 	stw	r18,8(sp)
   20988:	dc400115 	stw	r17,4(sp)
   2098c:	dc000015 	stw	r16,0(sp)
   20990:	dfc00415 	stw	ra,16(sp)
   20994:	2027883a 	mov	r19,r4
   20998:	2821883a 	mov	r16,r5
   2099c:	3025883a 	mov	r18,r6
   209a0:	3823883a 	mov	r17,r7
   209a4:	1000100e 	bge	r2,zero,209e8 <__sfvwrite_small_dev+0x7c>
   209a8:	8080000b 	ldhu	r2,0(r16)
   209ac:	10801014 	ori	r2,r2,64
   209b0:	8080000d 	sth	r2,0(r16)
   209b4:	00bfffc4 	movi	r2,-1
   209b8:	00000d06 	br	209f0 <__sfvwrite_small_dev+0x84>
   209bc:	88810050 	cmplti	r2,r17,1025
   209c0:	880f883a 	mov	r7,r17
   209c4:	1000011e 	bne	r2,zero,209cc <__sfvwrite_small_dev+0x60>
   209c8:	01c10004 	movi	r7,1024
   209cc:	8140008f 	ldh	r5,2(r16)
   209d0:	900d883a 	mov	r6,r18
   209d4:	9809883a 	mov	r4,r19
   209d8:	0020a140 	call	20a14 <_write_r>
   209dc:	00bff20e 	bge	zero,r2,209a8 <__sfvwrite_small_dev+0x3c>
   209e0:	88a3c83a 	sub	r17,r17,r2
   209e4:	90a5883a 	add	r18,r18,r2
   209e8:	047ff416 	blt	zero,r17,209bc <__sfvwrite_small_dev+0x50>
   209ec:	0005883a 	mov	r2,zero
   209f0:	dfc00417 	ldw	ra,16(sp)
   209f4:	dcc00317 	ldw	r19,12(sp)
   209f8:	dc800217 	ldw	r18,8(sp)
   209fc:	dc400117 	ldw	r17,4(sp)
   20a00:	dc000017 	ldw	r16,0(sp)
   20a04:	dec00504 	addi	sp,sp,20
   20a08:	f800283a 	ret
   20a0c:	00bfffc4 	movi	r2,-1
   20a10:	f800283a 	ret

00020a14 <_write_r>:
   20a14:	defffe04 	addi	sp,sp,-8
   20a18:	dc000015 	stw	r16,0(sp)
   20a1c:	008000b4 	movhi	r2,2
   20a20:	2021883a 	mov	r16,r4
   20a24:	2809883a 	mov	r4,r5
   20a28:	300b883a 	mov	r5,r6
   20a2c:	380d883a 	mov	r6,r7
   20a30:	dfc00115 	stw	ra,4(sp)
   20a34:	10094115 	stw	zero,9476(r2)
   20a38:	0020d240 	call	20d24 <write>
   20a3c:	10ffffd8 	cmpnei	r3,r2,-1
   20a40:	1800041e 	bne	r3,zero,20a54 <_write_r+0x40>
   20a44:	00c000b4 	movhi	r3,2
   20a48:	18c94117 	ldw	r3,9476(r3)
   20a4c:	18000126 	beq	r3,zero,20a54 <_write_r+0x40>
   20a50:	80c00015 	stw	r3,0(r16)
   20a54:	dfc00117 	ldw	ra,4(sp)
   20a58:	dc000017 	ldw	r16,0(sp)
   20a5c:	dec00204 	addi	sp,sp,8
   20a60:	f800283a 	ret

00020a64 <__divsi3>:
   20a64:	20001a16 	blt	r4,zero,20ad0 <__divsi3+0x6c>
   20a68:	000f883a 	mov	r7,zero
   20a6c:	2800020e 	bge	r5,zero,20a78 <__divsi3+0x14>
   20a70:	014bc83a 	sub	r5,zero,r5
   20a74:	39c0005c 	xori	r7,r7,1
   20a78:	200d883a 	mov	r6,r4
   20a7c:	00c00044 	movi	r3,1
   20a80:	2900092e 	bgeu	r5,r4,20aa8 <__divsi3+0x44>
   20a84:	00800804 	movi	r2,32
   20a88:	00c00044 	movi	r3,1
   20a8c:	00000106 	br	20a94 <__divsi3+0x30>
   20a90:	10001226 	beq	r2,zero,20adc <__divsi3+0x78>
   20a94:	294b883a 	add	r5,r5,r5
   20a98:	10bfffc4 	addi	r2,r2,-1
   20a9c:	18c7883a 	add	r3,r3,r3
   20aa0:	293ffb36 	bltu	r5,r4,20a90 <__divsi3+0x2c>
   20aa4:	18000d26 	beq	r3,zero,20adc <__divsi3+0x78>
   20aa8:	0005883a 	mov	r2,zero
   20aac:	31400236 	bltu	r6,r5,20ab8 <__divsi3+0x54>
   20ab0:	314dc83a 	sub	r6,r6,r5
   20ab4:	10c4b03a 	or	r2,r2,r3
   20ab8:	1806d07a 	srli	r3,r3,1
   20abc:	280ad07a 	srli	r5,r5,1
   20ac0:	183ffa1e 	bne	r3,zero,20aac <__divsi3+0x48>
   20ac4:	38000126 	beq	r7,zero,20acc <__divsi3+0x68>
   20ac8:	0085c83a 	sub	r2,zero,r2
   20acc:	f800283a 	ret
   20ad0:	0109c83a 	sub	r4,zero,r4
   20ad4:	01c00044 	movi	r7,1
   20ad8:	003fe406 	br	20a6c <__divsi3+0x8>
   20adc:	0005883a 	mov	r2,zero
   20ae0:	003ff806 	br	20ac4 <__divsi3+0x60>

00020ae4 <__modsi3>:
   20ae4:	20001a16 	blt	r4,zero,20b50 <__modsi3+0x6c>
   20ae8:	000f883a 	mov	r7,zero
   20aec:	2005883a 	mov	r2,r4
   20af0:	2800010e 	bge	r5,zero,20af8 <__modsi3+0x14>
   20af4:	014bc83a 	sub	r5,zero,r5
   20af8:	00c00044 	movi	r3,1
   20afc:	2900092e 	bgeu	r5,r4,20b24 <__modsi3+0x40>
   20b00:	01800804 	movi	r6,32
   20b04:	00c00044 	movi	r3,1
   20b08:	00000106 	br	20b10 <__modsi3+0x2c>
   20b0c:	30000d26 	beq	r6,zero,20b44 <__modsi3+0x60>
   20b10:	294b883a 	add	r5,r5,r5
   20b14:	31bfffc4 	addi	r6,r6,-1
   20b18:	18c7883a 	add	r3,r3,r3
   20b1c:	293ffb36 	bltu	r5,r4,20b0c <__modsi3+0x28>
   20b20:	18000826 	beq	r3,zero,20b44 <__modsi3+0x60>
   20b24:	1806d07a 	srli	r3,r3,1
   20b28:	11400136 	bltu	r2,r5,20b30 <__modsi3+0x4c>
   20b2c:	1145c83a 	sub	r2,r2,r5
   20b30:	280ad07a 	srli	r5,r5,1
   20b34:	183ffb1e 	bne	r3,zero,20b24 <__modsi3+0x40>
   20b38:	38000126 	beq	r7,zero,20b40 <__modsi3+0x5c>
   20b3c:	0085c83a 	sub	r2,zero,r2
   20b40:	f800283a 	ret
   20b44:	2005883a 	mov	r2,r4
   20b48:	383ffd26 	beq	r7,zero,20b40 <__modsi3+0x5c>
   20b4c:	003ffb06 	br	20b3c <__modsi3+0x58>
   20b50:	0109c83a 	sub	r4,zero,r4
   20b54:	01c00044 	movi	r7,1
   20b58:	003fe406 	br	20aec <__modsi3+0x8>

00020b5c <__udivsi3>:
   20b5c:	200d883a 	mov	r6,r4
   20b60:	2900152e 	bgeu	r5,r4,20bb8 <__udivsi3+0x5c>
   20b64:	28001416 	blt	r5,zero,20bb8 <__udivsi3+0x5c>
   20b68:	00800804 	movi	r2,32
   20b6c:	00c00044 	movi	r3,1
   20b70:	00000206 	br	20b7c <__udivsi3+0x20>
   20b74:	10000e26 	beq	r2,zero,20bb0 <__udivsi3+0x54>
   20b78:	28000516 	blt	r5,zero,20b90 <__udivsi3+0x34>
   20b7c:	294b883a 	add	r5,r5,r5
   20b80:	10bfffc4 	addi	r2,r2,-1
   20b84:	18c7883a 	add	r3,r3,r3
   20b88:	293ffa36 	bltu	r5,r4,20b74 <__udivsi3+0x18>
   20b8c:	18000826 	beq	r3,zero,20bb0 <__udivsi3+0x54>
   20b90:	0005883a 	mov	r2,zero
   20b94:	31400236 	bltu	r6,r5,20ba0 <__udivsi3+0x44>
   20b98:	314dc83a 	sub	r6,r6,r5
   20b9c:	10c4b03a 	or	r2,r2,r3
   20ba0:	1806d07a 	srli	r3,r3,1
   20ba4:	280ad07a 	srli	r5,r5,1
   20ba8:	183ffa1e 	bne	r3,zero,20b94 <__udivsi3+0x38>
   20bac:	f800283a 	ret
   20bb0:	0005883a 	mov	r2,zero
   20bb4:	f800283a 	ret
   20bb8:	00c00044 	movi	r3,1
   20bbc:	003ff406 	br	20b90 <__udivsi3+0x34>

00020bc0 <__umodsi3>:
   20bc0:	2005883a 	mov	r2,r4
   20bc4:	2900132e 	bgeu	r5,r4,20c14 <__umodsi3+0x54>
   20bc8:	28001216 	blt	r5,zero,20c14 <__umodsi3+0x54>
   20bcc:	01800804 	movi	r6,32
   20bd0:	00c00044 	movi	r3,1
   20bd4:	00000206 	br	20be0 <__umodsi3+0x20>
   20bd8:	30000c26 	beq	r6,zero,20c0c <__umodsi3+0x4c>
   20bdc:	28000516 	blt	r5,zero,20bf4 <__umodsi3+0x34>
   20be0:	294b883a 	add	r5,r5,r5
   20be4:	31bfffc4 	addi	r6,r6,-1
   20be8:	18c7883a 	add	r3,r3,r3
   20bec:	293ffa36 	bltu	r5,r4,20bd8 <__umodsi3+0x18>
   20bf0:	18000626 	beq	r3,zero,20c0c <__umodsi3+0x4c>
   20bf4:	1806d07a 	srli	r3,r3,1
   20bf8:	11400136 	bltu	r2,r5,20c00 <__umodsi3+0x40>
   20bfc:	1145c83a 	sub	r2,r2,r5
   20c00:	280ad07a 	srli	r5,r5,1
   20c04:	183ffb1e 	bne	r3,zero,20bf4 <__umodsi3+0x34>
   20c08:	f800283a 	ret
   20c0c:	2005883a 	mov	r2,r4
   20c10:	f800283a 	ret
   20c14:	00c00044 	movi	r3,1
   20c18:	003ff606 	br	20bf4 <__umodsi3+0x34>

00020c1c <__mulsi3>:
   20c1c:	0005883a 	mov	r2,zero
   20c20:	20000726 	beq	r4,zero,20c40 <__mulsi3+0x24>
   20c24:	20c0004c 	andi	r3,r4,1
   20c28:	2008d07a 	srli	r4,r4,1
   20c2c:	18000126 	beq	r3,zero,20c34 <__mulsi3+0x18>
   20c30:	1145883a 	add	r2,r2,r5
   20c34:	294b883a 	add	r5,r5,r5
   20c38:	203ffa1e 	bne	r4,zero,20c24 <__mulsi3+0x8>
   20c3c:	f800283a 	ret
   20c40:	f800283a 	ret

00020c44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20c44:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   20c48:	008000b4 	movhi	r2,2
   20c4c:	00c000b4 	movhi	r3,2
   20c50:	dfc00015 	stw	ra,0(sp)
   20c54:	10888504 	addi	r2,r2,8724
   20c58:	18c8e304 	addi	r3,r3,9100
   20c5c:	10c00326 	beq	r2,r3,20c6c <alt_load+0x28>
  {
    while( to != end )
   20c60:	010000b4 	movhi	r4,2
   20c64:	2108e304 	addi	r4,r4,9100
   20c68:	1100141e 	bne	r2,r4,20cbc <alt_load+0x78>
  if (to != from)
   20c6c:	008000b4 	movhi	r2,2
   20c70:	00c000b4 	movhi	r3,2
   20c74:	10800804 	addi	r2,r2,32
   20c78:	18c00804 	addi	r3,r3,32
   20c7c:	10c00326 	beq	r2,r3,20c8c <alt_load+0x48>
    while( to != end )
   20c80:	010000b4 	movhi	r4,2
   20c84:	21006004 	addi	r4,r4,384
   20c88:	1100111e 	bne	r2,r4,20cd0 <alt_load+0x8c>
  if (to != from)
   20c8c:	008000b4 	movhi	r2,2
   20c90:	00c000b4 	movhi	r3,2
   20c94:	10886e04 	addi	r2,r2,8632
   20c98:	18c86e04 	addi	r3,r3,8632
   20c9c:	10c00326 	beq	r2,r3,20cac <alt_load+0x68>
    while( to != end )
   20ca0:	010000b4 	movhi	r4,2
   20ca4:	21088504 	addi	r4,r4,8724
   20ca8:	11000e1e 	bne	r2,r4,20ce4 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20cac:	0021f800 	call	21f80 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   20cb0:	dfc00017 	ldw	ra,0(sp)
   20cb4:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   20cb8:	00220601 	jmpi	22060 <alt_icache_flush_all>
    {
      *to++ = *from++;
   20cbc:	19400017 	ldw	r5,0(r3)
   20cc0:	10800104 	addi	r2,r2,4
   20cc4:	18c00104 	addi	r3,r3,4
   20cc8:	117fff15 	stw	r5,-4(r2)
   20ccc:	003fe606 	br	20c68 <alt_load+0x24>
   20cd0:	19400017 	ldw	r5,0(r3)
   20cd4:	10800104 	addi	r2,r2,4
   20cd8:	18c00104 	addi	r3,r3,4
   20cdc:	117fff15 	stw	r5,-4(r2)
   20ce0:	003fe906 	br	20c88 <alt_load+0x44>
   20ce4:	19400017 	ldw	r5,0(r3)
   20ce8:	10800104 	addi	r2,r2,4
   20cec:	18c00104 	addi	r3,r3,4
   20cf0:	117fff15 	stw	r5,-4(r2)
   20cf4:	003fec06 	br	20ca8 <alt_load+0x64>

00020cf8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20cf8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20cfc:	0009883a 	mov	r4,zero
{
   20d00:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   20d04:	0020d840 	call	20d84 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20d08:	0020da40 	call	20da4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   20d0c:	d1a06617 	ldw	r6,-32360(gp)
   20d10:	d1606717 	ldw	r5,-32356(gp)
   20d14:	d1206817 	ldw	r4,-32352(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   20d18:	dfc00017 	ldw	ra,0(sp)
   20d1c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   20d20:	00201bc1 	jmpi	201bc <main>

00020d24 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   20d24:	20800060 	cmpeqi	r2,r4,1
   20d28:	1000021e 	bne	r2,zero,20d34 <write+0x10>
   20d2c:	21000098 	cmpnei	r4,r4,2
   20d30:	2000041e 	bne	r4,zero,20d44 <write+0x20>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   20d34:	010000b4 	movhi	r4,2
   20d38:	000f883a 	mov	r7,zero
   20d3c:	2108de04 	addi	r4,r4,9080
   20d40:	0021ec81 	jmpi	21ec8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   20d44:	d0a00517 	ldw	r2,-32748(gp)
   20d48:	10000926 	beq	r2,zero,20d70 <write+0x4c>
{
   20d4c:	deffff04 	addi	sp,sp,-4
   20d50:	dfc00015 	stw	ra,0(sp)
   20d54:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   20d58:	00c01444 	movi	r3,81
   20d5c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   20d60:	00bfffc4 	movi	r2,-1
   20d64:	dfc00017 	ldw	ra,0(sp)
   20d68:	dec00104 	addi	sp,sp,4
   20d6c:	f800283a 	ret
   20d70:	d0a06504 	addi	r2,gp,-32364
        ALT_ERRNO = EBADFD;
   20d74:	00c01444 	movi	r3,81
   20d78:	10c00015 	stw	r3,0(r2)
}
   20d7c:	00bfffc4 	movi	r2,-1
   20d80:	f800283a 	ret

00020d84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20d84:	deffff04 	addi	sp,sp,-4
   20d88:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   20d8c:	00221580 	call	22158 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20d90:	00800044 	movi	r2,1
   20d94:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20d98:	dfc00017 	ldw	ra,0(sp)
   20d9c:	dec00104 	addi	sp,sp,4
   20da0:	f800283a 	ret

00020da4 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   20da4:	010000b4 	movhi	r4,2
   20da8:	2108ce04 	addi	r4,r4,9016
   20dac:	0021abc1 	jmpi	21abc <alt_avalon_i2c_init>

00020db0 <alt_avalon_i2c_register_optional_irq_handler>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
   20db0:	008000b4 	movhi	r2,2
   irq_data->irq_busy=0;
   20db4:	28000215 	stw	zero,8(r5)
    dev->callback         = callback;
   20db8:	10858a04 	addi	r2,r2,5672
   20dbc:	20800615 	stw	r2,24(r4)
    dev->callback_context = context;
   20dc0:	21400715 	stw	r5,28(r4)
    dev->control          = control;
   20dc4:	20000815 	stw	zero,32(r4)
}
   20dc8:	f800283a 	ret

00020dcc <alt_avalon_i2c_register_callback>:
    dev->callback         = callback;
   20dcc:	21400615 	stw	r5,24(r4)
    dev->callback_context = context;
   20dd0:	21c00715 	stw	r7,28(r4)
    dev->control          = control;
   20dd4:	21800815 	stw	r6,32(r4)

    return ;
}
   20dd8:	f800283a 	ret

00020ddc <alt_avalon_i2c_open>:
/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
    ALT_AVALON_I2C_DEV_t* dev = NULL;

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   20ddc:	d1600304 	addi	r5,gp,-32756
   20de0:	0021ff01 	jmpi	21ff0 <alt_find_dev>

00020de4 <alt_avalon_i2c_enable>:
}

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   20de4:	21400717 	ldw	r5,28(r4)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   20de8:	20800317 	ldw	r2,12(r4)
   20dec:	10800237 	ldwio	r2,8(r2)
   20df0:	1080004c 	andi	r2,r2,1
   if (enable_status)
   20df4:	10000a1e 	bne	r2,zero,20e20 <alt_avalon_i2c_enable+0x3c>
   {
     return ALT_AVALON_I2C_BUSY;
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   20df8:	21800617 	ldw	r6,24(r4)
   20dfc:	00c000b4 	movhi	r3,2
   20e00:	18c58a04 	addi	r3,r3,5672
   20e04:	30c0011e 	bne	r6,r3,20e0c <alt_avalon_i2c_enable+0x28>
   {
     irq_data->irq_busy=0;
   20e08:	28000215 	stw	zero,8(r5)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   20e0c:	21000317 	ldw	r4,12(r4)
   20e10:	20c00237 	ldwio	r3,8(r4)
   20e14:	18c00054 	ori	r3,r3,1
   20e18:	20c00235 	stwio	r3,8(r4)

   return ALT_AVALON_I2C_SUCCESS;
   20e1c:	f800283a 	ret
     return ALT_AVALON_I2C_BUSY;
   20e20:	00bffe44 	movi	r2,-7
}
   20e24:	f800283a 	ret

00020e28 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   20e28:	20c00317 	ldw	r3,12(r4)
   20e2c:	18800237 	ldwio	r2,8(r3)
   20e30:	013fff84 	movi	r4,-2
   20e34:	1104703a 	and	r2,r2,r4
   20e38:	18800235 	stwio	r2,8(r3)

}
   20e3c:	f800283a 	ret

00020e40 <alt_avalon_i2c_master_config_get>:
/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
   20e40:	20800d17 	ldw	r2,52(r4)
   20e44:	28800015 	stw	r2,0(r5)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   20e48:	20800317 	ldw	r2,12(r4)
   20e4c:	10800237 	ldwio	r2,8(r2)
   20e50:	1005d07a 	srai	r2,r2,1
   20e54:	1080004c 	andi	r2,r2,1
   20e58:	28800115 	stw	r2,4(r5)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   20e5c:	20800317 	ldw	r2,12(r4)
   20e60:	10800937 	ldwio	r2,36(r2)
   20e64:	2880020d 	sth	r2,8(r5)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   20e68:	20800317 	ldw	r2,12(r4)
   20e6c:	10800837 	ldwio	r2,32(r2)
   20e70:	2880028d 	sth	r2,10(r5)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   20e74:	20800317 	ldw	r2,12(r4)
   20e78:	10800a37 	ldwio	r2,40(r2)
   20e7c:	2880030d 	sth	r2,12(r5)
}
   20e80:	f800283a 	ret

00020e84 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
   20e84:	28800017 	ldw	r2,0(r5)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   20e88:	21800317 	ldw	r6,12(r4)
    i2c_dev->address_mode   =   cfg->addr_mode;
   20e8c:	20800d15 	stw	r2,52(r4)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   20e90:	30c00237 	ldwio	r3,8(r6)
   20e94:	01ffff44 	movi	r7,-3
   20e98:	28800117 	ldw	r2,4(r5)
   20e9c:	19c6703a 	and	r3,r3,r7
   20ea0:	1004907a 	slli	r2,r2,1
   20ea4:	1080008c 	andi	r2,r2,2
   20ea8:	10c4b03a 	or	r2,r2,r3
   20eac:	30800235 	stwio	r2,8(r6)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   20eb0:	20800317 	ldw	r2,12(r4)
   20eb4:	28c0020b 	ldhu	r3,8(r5)
   20eb8:	10c00935 	stwio	r3,36(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   20ebc:	20800317 	ldw	r2,12(r4)
   20ec0:	28c0028b 	ldhu	r3,10(r5)
   20ec4:	10c00835 	stwio	r3,32(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   20ec8:	20800317 	ldw	r2,12(r4)
   20ecc:	28c0030b 	ldhu	r3,12(r5)
   20ed0:	10c00a35 	stwio	r3,40(r2)
}
   20ed4:	f800283a 	ret

00020ed8 <alt_avalon_i2c_master_config_speed_get>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   20ed8:	28c0028b 	ldhu	r3,10(r5)
   20edc:	18000f26 	beq	r3,zero,20f1c <alt_avalon_i2c_master_config_speed_get+0x44>
   20ee0:	2940020b 	ldhu	r5,8(r5)
   20ee4:	28000d26 	beq	r5,zero,20f1c <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   20ee8:	21000c17 	ldw	r4,48(r4)
{
   20eec:	defffe04 	addi	sp,sp,-8
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   20ef0:	194b883a 	add	r5,r3,r5
{
   20ef4:	dc000015 	stw	r16,0(sp)
   20ef8:	dfc00115 	stw	ra,4(sp)
   20efc:	3021883a 	mov	r16,r6
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   20f00:	0020b5c0 	call	20b5c <__udivsi3>
   20f04:	80800015 	stw	r2,0(r16)

   return ALT_AVALON_I2C_SUCCESS;
   20f08:	0005883a 	mov	r2,zero
}
   20f0c:	dfc00117 	ldw	ra,4(sp)
   20f10:	dc000017 	ldw	r16,0(sp)
   20f14:	dec00204 	addi	sp,sp,8
   20f18:	f800283a 	ret
       return ALT_AVALON_I2C_BAD_ARG;
   20f1c:	00bfff44 	movi	r2,-3
}
   20f20:	f800283a 	ret

00020f24 <alt_avalon_i2c_master_config_speed_set>:
                                                alt_u32 speed_in_hz)
{
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   20f24:	008001b4 	movhi	r2,6
   20f28:	30ffffc4 	addi	r3,r6,-1
   20f2c:	10869fc4 	addi	r2,r2,6783
   20f30:	10c01d36 	bltu	r2,r3,20fa8 <alt_avalon_i2c_master_config_speed_set+0x84>
{
   20f34:	defffd04 	addi	sp,sp,-12
   20f38:	dc000015 	stw	r16,0(sp)
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   20f3c:	21000c17 	ldw	r4,48(r4)
   20f40:	2821883a 	mov	r16,r5
   20f44:	300a907a 	slli	r5,r6,1
{
   20f48:	dc400115 	stw	r17,4(sp)
   20f4c:	dfc00215 	stw	ra,8(sp)
   20f50:	3023883a 	mov	r17,r6
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   20f54:	0020b5c0 	call	20b5c <__udivsi3>

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   20f58:	00c000b4 	movhi	r3,2
   20f5c:	18e1a804 	addi	r3,r3,-31072
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   20f60:	11000f04 	addi	r4,r2,60
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   20f64:	10bff104 	addi	r2,r2,-60
    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   20f68:	1c400d2e 	bgeu	r3,r17,20fa0 <alt_avalon_i2c_master_config_speed_set+0x7c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   20f6c:	00c00044 	movi	r3,1
   20f70:	80c00115 	stw	r3,4(r16)
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   20f74:	1006d07a 	srli	r3,r2,1
    cfg->scl_lcnt = scl_lcnt;
   20f78:	8080028d 	sth	r2,10(r16)
    cfg->scl_hcnt = scl_hcnt;
   20f7c:	8100020d 	sth	r4,8(r16)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   20f80:	10c5c83a 	sub	r2,r2,r3
   20f84:	8080030d 	sth	r2,12(r16)

    return ALT_AVALON_I2C_SUCCESS;
   20f88:	0005883a 	mov	r2,zero

}
   20f8c:	dfc00217 	ldw	ra,8(sp)
   20f90:	dc400117 	ldw	r17,4(sp)
   20f94:	dc000017 	ldw	r16,0(sp)
   20f98:	dec00304 	addi	sp,sp,12
   20f9c:	f800283a 	ret
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   20fa0:	80000115 	stw	zero,4(r16)
   20fa4:	003ff306 	br	20f74 <alt_avalon_i2c_master_config_speed_set+0x50>
        return ALT_AVALON_I2C_RANGE;
   20fa8:	00bfff04 	movi	r2,-4
}
   20fac:	f800283a 	ret

00020fb0 <alt_avalon_i2c_is_busy>:
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   20fb0:	20800317 	ldw	r2,12(r4)
   20fb4:	10800537 	ldwio	r2,20(r2)
    {
       return ALT_AVALON_I2C_TRUE;
    }

    return ALT_AVALON_I2C_FALSE;
}
   20fb8:	1080004c 	andi	r2,r2,1
   20fbc:	f800283a 	ret

00020fc0 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
   20fc0:	38000015 	stw	zero,0(r7)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   20fc4:	20800317 	ldw	r2,12(r4)
   20fc8:	10c00737 	ldwio	r3,28(r2)
   20fcc:	18000926 	beq	r3,zero,20ff4 <alt_avalon_i2c_rx_read_available+0x34>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   20fd0:	10c00137 	ldwio	r3,4(r2)
   20fd4:	38800017 	ldw	r2,0(r7)
   20fd8:	2885883a 	add	r2,r5,r2
   20fdc:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   20fe0:	38800017 	ldw	r2,0(r7)
   20fe4:	10800044 	addi	r2,r2,1
   20fe8:	38800015 	stw	r2,0(r7)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   20fec:	11bff51e 	bne	r2,r6,20fc4 <alt_avalon_i2c_rx_read_available+0x4>
   20ff0:	303ff426 	beq	r6,zero,20fc4 <alt_avalon_i2c_rx_read_available+0x4>
    }
}
   20ff4:	f800283a 	ret

00020ff8 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   20ff8:	defffc04 	addi	sp,sp,-16
   20ffc:	dc000015 	stw	r16,0(sp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   21000:	040000b4 	movhi	r16,2
{
   21004:	dc800215 	stw	r18,8(sp)
   21008:	dc400115 	stw	r17,4(sp)
   2100c:	dfc00315 	stw	ra,12(sp)
   21010:	2023883a 	mov	r17,r4
   21014:	2825883a 	mov	r18,r5
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   21018:	8421a804 	addi	r16,r16,-31072
   2101c:	88800317 	ldw	r2,12(r17)
   21020:	10800737 	ldwio	r2,28(r2)
   21024:	10000a26 	beq	r2,zero,21050 <alt_avalon_i2c_rx_read+0x58>
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   21028:	0005883a 	mov	r2,zero
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   2102c:	88c00317 	ldw	r3,12(r17)
   21030:	18c00137 	ldwio	r3,4(r3)
   21034:	90c00005 	stb	r3,0(r18)
        
    return status;
}
   21038:	dfc00317 	ldw	ra,12(sp)
   2103c:	dc800217 	ldw	r18,8(sp)
   21040:	dc400117 	ldw	r17,4(sp)
   21044:	dc000017 	ldw	r16,0(sp)
   21048:	dec00404 	addi	sp,sp,16
   2104c:	f800283a 	ret
      if (timeout<10) alt_busy_sleep(10000);
   21050:	808002a8 	cmpgeui	r2,r16,10
   21054:	1000021e 	bne	r2,zero,21060 <alt_avalon_i2c_rx_read+0x68>
   21058:	0109c404 	movi	r4,10000
   2105c:	0021ef80 	call	21ef8 <alt_busy_sleep>
      if (--timeout == 0)
   21060:	843fffc4 	addi	r16,r16,-1
   21064:	803fed1e 	bne	r16,zero,2101c <alt_avalon_i2c_rx_read+0x24>
        status = ALT_AVALON_I2C_TIMEOUT;
   21068:	00bfff84 	movi	r2,-2
   2106c:	003fef06 	br	2102c <alt_avalon_i2c_rx_read+0x34>

00021070 <alt_avalon_i2c_master_target_get>:
}

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
    *target_addr=i2c_dev->master_target_address;
   21070:	20800917 	ldw	r2,36(r4)
   21074:	28800015 	stw	r2,0(r5)
}
   21078:	f800283a 	ret

0002107c <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
    i2c_dev->master_target_address=target_addr;
   2107c:	21400915 	stw	r5,36(r4)
}
   21080:	f800283a 	ret

00021084 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   21084:	20800317 	ldw	r2,12(r4)
   21088:	10800437 	ldwio	r2,16(r2)
   2108c:	1080010c 	andi	r2,r2,4
   21090:	10000226 	beq	r2,zero,2109c <alt_avalon_i2c_check_nack+0x18>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   21094:	00bffec4 	movi	r2,-5
   21098:	28800015 	stw	r2,0(r5)
    }
}
   2109c:	f800283a 	ret

000210a0 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   210a0:	20800317 	ldw	r2,12(r4)
   210a4:	10800437 	ldwio	r2,16(r2)
   210a8:	1080020c 	andi	r2,r2,8
   210ac:	10000226 	beq	r2,zero,210b8 <alt_avalon_i2c_check_arblost+0x18>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   210b0:	00bffe84 	movi	r2,-6
   210b4:	28800015 	stw	r2,0(r5)
    }
}
   210b8:	f800283a 	ret

000210bc <alt_avalon_i2c_cmd_write>:
{
   210bc:	defff904 	addi	sp,sp,-28
   210c0:	dd000515 	stw	r20,20(sp)
   210c4:	dcc00415 	stw	r19,16(sp)
   210c8:	dc800315 	stw	r18,12(sp)
   210cc:	dc400215 	stw	r17,8(sp)
   210d0:	dc000115 	stw	r16,4(sp)
   210d4:	dfc00615 	stw	ra,24(sp)
   210d8:	2027883a 	mov	r19,r4
   210dc:	2829883a 	mov	r20,r5
   210e0:	3021883a 	mov	r16,r6
   210e4:	3823883a 	mov	r17,r7
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   210e8:	d8000015 	stw	zero,0(sp)
    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   210ec:	0489c404 	movi	r18,10000
   210f0:	98c00317 	ldw	r3,12(r19)
   210f4:	18800437 	ldwio	r2,16(r3)
   210f8:	1080004c 	andi	r2,r2,1
   210fc:	10001726 	beq	r2,zero,2115c <alt_avalon_i2c_cmd_write+0xa0>
    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   21100:	84003fcc 	andi	r16,r16,255
   21104:	8020927a 	slli	r16,r16,9
   21108:	8c403fcc 	andi	r17,r17,255
   2110c:	8822923a 	slli	r17,r17,8
   21110:	a5003fcc 	andi	r20,r20,255
   21114:	8520b03a 	or	r16,r16,r20
   21118:	8460b03a 	or	r16,r16,r17
   2111c:	1c000035 	stwio	r16,0(r3)
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   21120:	d80b883a 	mov	r5,sp
   21124:	9809883a 	mov	r4,r19
   21128:	00210840 	call	21084 <alt_avalon_i2c_check_nack>
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   2112c:	d80b883a 	mov	r5,sp
   21130:	9809883a 	mov	r4,r19
   21134:	00210a00 	call	210a0 <alt_avalon_i2c_check_arblost>
    return status;
   21138:	d8800017 	ldw	r2,0(sp)
}
   2113c:	dfc00617 	ldw	ra,24(sp)
   21140:	dd000517 	ldw	r20,20(sp)
   21144:	dcc00417 	ldw	r19,16(sp)
   21148:	dc800317 	ldw	r18,12(sp)
   2114c:	dc400217 	ldw	r17,8(sp)
   21150:	dc000117 	ldw	r16,4(sp)
   21154:	dec00704 	addi	sp,sp,28
   21158:	f800283a 	ret
      if (timeout<10) alt_busy_sleep(10000);    
   2115c:	908002a8 	cmpgeui	r2,r18,10
   21160:	1000021e 	bne	r2,zero,2116c <alt_avalon_i2c_cmd_write+0xb0>
   21164:	0109c404 	movi	r4,10000
   21168:	0021ef80 	call	21ef8 <alt_busy_sleep>
      if (--timeout == 0)
   2116c:	94bfffc4 	addi	r18,r18,-1
   21170:	903fdf1e 	bne	r18,zero,210f0 <alt_avalon_i2c_cmd_write+0x34>
        return ALT_AVALON_I2C_TIMEOUT;
   21174:	00bfff84 	movi	r2,-2
   21178:	003ff006 	br	2113c <alt_avalon_i2c_cmd_write+0x80>

0002117c <alt_avalon_i2c_send_address>:
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   2117c:	21c00d17 	ldw	r7,52(r4)
   21180:	20800917 	ldw	r2,36(r4)
   21184:	31803fcc 	andi	r6,r6,255
   21188:	39c00058 	cmpnei	r7,r7,1
   2118c:	3800121e 	bne	r7,zero,211d8 <alt_avalon_i2c_send_address+0x5c>
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   21190:	1004d1fa 	srli	r2,r2,7
{
   21194:	defffe04 	addi	sp,sp,-8
   21198:	dc000015 	stw	r16,0(sp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   2119c:	1080038c 	andi	r2,r2,14
   211a0:	288ab03a 	or	r5,r5,r2
   211a4:	29403fcc 	andi	r5,r5,255
   211a8:	29403c14 	ori	r5,r5,240
{
   211ac:	dfc00115 	stw	ra,4(sp)
   211b0:	2021883a 	mov	r16,r4
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   211b4:	00210bc0 	call	210bc <alt_avalon_i2c_cmd_write>
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   211b8:	81400903 	ldbu	r5,36(r16)
   211bc:	000f883a 	mov	r7,zero
   211c0:	000d883a 	mov	r6,zero
   211c4:	8009883a 	mov	r4,r16
}
   211c8:	dfc00117 	ldw	ra,4(sp)
   211cc:	dc000017 	ldw	r16,0(sp)
   211d0:	dec00204 	addi	sp,sp,8
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   211d4:	00210bc1 	jmpi	210bc <alt_avalon_i2c_cmd_write>
   211d8:	1004907a 	slli	r2,r2,1
   211dc:	000f883a 	mov	r7,zero
   211e0:	288ab03a 	or	r5,r5,r2
   211e4:	29403fcc 	andi	r5,r5,255
   211e8:	003ffa06 	br	211d4 <alt_avalon_i2c_send_address+0x58>

000211ec <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   211ec:	defff904 	addi	sp,sp,-28
   211f0:	dc800315 	stw	r18,12(sp)
   211f4:	dfc00615 	stw	ra,24(sp)
   211f8:	dd000515 	stw	r20,20(sp)
   211fc:	dcc00415 	stw	r19,16(sp)
   21200:	dc400215 	stw	r17,8(sp)
   21204:	dc000115 	stw	r16,4(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21208:	d8000015 	stw	zero,0(sp)
{
   2120c:	dc800717 	ldw	r18,28(sp)
    alt_u32 timeout=size * 10000;
    
    if (size==0)
   21210:	30004626 	beq	r6,zero,2132c <alt_avalon_i2c_master_transmit+0x140>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21214:	3cc03fcc 	andi	r19,r7,255
   21218:	2021883a 	mov	r16,r4
   2121c:	2823883a 	mov	r17,r5
   21220:	3029883a 	mov	r20,r6
   21224:	9800061e 	bne	r19,zero,21240 <alt_avalon_i2c_master_transmit+0x54>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21228:	0020de40 	call	20de4 <alt_avalon_i2c_enable>
   2122c:	d8800015 	stw	r2,0(sp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21230:	1000361e 	bne	r2,zero,2130c <alt_avalon_i2c_master_transmit+0x120>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   21234:	80800317 	ldw	r2,12(r16)
   21238:	00c00704 	movi	r3,28
   2123c:	10c00435 	stwio	r3,16(r2)
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   21240:	980d883a 	mov	r6,r19
   21244:	000b883a 	mov	r5,zero
   21248:	8009883a 	mov	r4,r16
   2124c:	002117c0 	call	2117c <alt_avalon_i2c_send_address>
   21250:	d8800015 	stw	r2,0(sp)
    if (status == ALT_AVALON_I2C_SUCCESS)
   21254:	1000051e 	bne	r2,zero,2126c <alt_avalon_i2c_master_transmit+0x80>
   21258:	a4ffffc4 	addi	r19,r20,-1
   2125c:	8ce7883a 	add	r19,r17,r19
   21260:	d8800017 	ldw	r2,0(sp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21264:	9c401e26 	beq	r19,r17,212e0 <alt_avalon_i2c_master_transmit+0xf4>
   21268:	10001526 	beq	r2,zero,212c0 <alt_avalon_i2c_master_transmit+0xd4>
    alt_u32 timeout=size * 10000;
   2126c:	0149c404 	movi	r5,10000
   21270:	a009883a 	mov	r4,r20
   21274:	0020c1c0 	call	20c1c <__mulsi3>
   21278:	1023883a 	mov	r17,r2
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2127c:	8009883a 	mov	r4,r16
   21280:	0020fb00 	call	20fb0 <alt_avalon_i2c_is_busy>
   21284:	10000826 	beq	r2,zero,212a8 <alt_avalon_i2c_master_transmit+0xbc>
            if (timeout<10) alt_busy_sleep(10000);
   21288:	888002a8 	cmpgeui	r2,r17,10
   2128c:	1000021e 	bne	r2,zero,21298 <alt_avalon_i2c_master_transmit+0xac>
   21290:	0109c404 	movi	r4,10000
   21294:	0021ef80 	call	21ef8 <alt_busy_sleep>
            if (--timeout == 0)
   21298:	8c7fffc4 	addi	r17,r17,-1
   2129c:	883ff71e 	bne	r17,zero,2127c <alt_avalon_i2c_master_transmit+0x90>
               status = ALT_AVALON_I2C_TIMEOUT;
   212a0:	00bfff84 	movi	r2,-2
   212a4:	d8800015 	stw	r2,0(sp)
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   212a8:	8009883a 	mov	r4,r16
   212ac:	d80b883a 	mov	r5,sp
   212b0:	00210840 	call	21084 <alt_avalon_i2c_check_nack>
        alt_avalon_i2c_disable(i2c_dev);
   212b4:	8009883a 	mov	r4,r16
   212b8:	0020e280 	call	20e28 <alt_avalon_i2c_disable>
   212bc:	00001206 	br	21308 <alt_avalon_i2c_master_transmit+0x11c>
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   212c0:	d9c00017 	ldw	r7,0(sp)
   212c4:	89400003 	ldbu	r5,0(r17)
   212c8:	8009883a 	mov	r4,r16
   212cc:	380d883a 	mov	r6,r7
   212d0:	00210bc0 	call	210bc <alt_avalon_i2c_cmd_write>
   212d4:	d8800015 	stw	r2,0(sp)
            ++buffer;
   212d8:	8c400044 	addi	r17,r17,1
            --size;
   212dc:	003fe006 	br	21260 <alt_avalon_i2c_master_transmit+0x74>
        if (status == ALT_AVALON_I2C_SUCCESS)
   212e0:	103fe21e 	bne	r2,zero,2126c <alt_avalon_i2c_master_transmit+0x80>
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   212e4:	d9800017 	ldw	r6,0(sp)
   212e8:	99400003 	ldbu	r5,0(r19)
   212ec:	94803fcc 	andi	r18,r18,255
   212f0:	900f883a 	mov	r7,r18
   212f4:	8009883a 	mov	r4,r16
   212f8:	00210bc0 	call	210bc <alt_avalon_i2c_cmd_write>
   212fc:	d8800015 	stw	r2,0(sp)
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   21300:	903fda1e 	bne	r18,zero,2126c <alt_avalon_i2c_master_transmit+0x80>
   21304:	103fd91e 	bne	r2,zero,2126c <alt_avalon_i2c_master_transmit+0x80>
    return status;
   21308:	d8800017 	ldw	r2,0(sp)
}
   2130c:	dfc00617 	ldw	ra,24(sp)
   21310:	dd000517 	ldw	r20,20(sp)
   21314:	dcc00417 	ldw	r19,16(sp)
   21318:	dc800317 	ldw	r18,12(sp)
   2131c:	dc400217 	ldw	r17,8(sp)
   21320:	dc000117 	ldw	r16,4(sp)
   21324:	dec00704 	addi	sp,sp,28
   21328:	f800283a 	ret
      return ALT_AVALON_I2C_SUCCESS;
   2132c:	0005883a 	mov	r2,zero
   21330:	003ff606 	br	2130c <alt_avalon_i2c_master_transmit+0x120>

00021334 <alt_avalon_i2c_master_receive>:
{
   21334:	defff604 	addi	sp,sp,-40
   21338:	dd400715 	stw	r21,28(sp)
   2133c:	dfc00915 	stw	ra,36(sp)
   21340:	dd800815 	stw	r22,32(sp)
   21344:	dd000615 	stw	r20,24(sp)
   21348:	dcc00515 	stw	r19,20(sp)
   2134c:	dc800415 	stw	r18,16(sp)
   21350:	dc400315 	stw	r17,12(sp)
   21354:	dc000215 	stw	r16,8(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21358:	d8000015 	stw	zero,0(sp)
{
   2135c:	dd400a17 	ldw	r21,40(sp)
    if (size==0)
   21360:	30006026 	beq	r6,zero,214e4 <alt_avalon_i2c_master_receive+0x1b0>
    if (!issue_restart) 
   21364:	3c003fcc 	andi	r16,r7,255
   21368:	2023883a 	mov	r17,r4
   2136c:	2825883a 	mov	r18,r5
   21370:	3029883a 	mov	r20,r6
   21374:	8000061e 	bne	r16,zero,21390 <alt_avalon_i2c_master_receive+0x5c>
      status = alt_avalon_i2c_enable(i2c_dev);
   21378:	0020de40 	call	20de4 <alt_avalon_i2c_enable>
   2137c:	d8800015 	stw	r2,0(sp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21380:	10004e1e 	bne	r2,zero,214bc <alt_avalon_i2c_master_receive+0x188>
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   21384:	88800317 	ldw	r2,12(r17)
   21388:	00c00704 	movi	r3,28
   2138c:	10c00435 	stwio	r3,16(r2)
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   21390:	800d883a 	mov	r6,r16
   21394:	01400044 	movi	r5,1
   21398:	8809883a 	mov	r4,r17
   2139c:	002117c0 	call	2117c <alt_avalon_i2c_send_address>
   213a0:	d8800015 	stw	r2,0(sp)
   213a4:	1027883a 	mov	r19,r2
    if (status == ALT_AVALON_I2C_SUCCESS)
   213a8:	10002f26 	beq	r2,zero,21468 <alt_avalon_i2c_master_receive+0x134>
    alt_u32 bytes_read=0;
   213ac:	0021883a 	mov	r16,zero
   213b0:	9425c83a 	sub	r18,r18,r16
   213b4:	940b883a 	add	r5,r18,r16
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   213b8:	85003b2e 	bgeu	r16,r20,214a8 <alt_avalon_i2c_master_receive+0x174>
   213bc:	d8800017 	ldw	r2,0(sp)
   213c0:	10003426 	beq	r2,zero,21494 <alt_avalon_i2c_master_receive+0x160>
        timeout=10000 * size;
   213c4:	0149c404 	movi	r5,10000
   213c8:	a009883a 	mov	r4,r20
   213cc:	0020c1c0 	call	20c1c <__mulsi3>
   213d0:	1021883a 	mov	r16,r2
        while (alt_avalon_i2c_is_busy(i2c_dev))
   213d4:	8809883a 	mov	r4,r17
   213d8:	0020fb00 	call	20fb0 <alt_avalon_i2c_is_busy>
   213dc:	10000826 	beq	r2,zero,21400 <alt_avalon_i2c_master_receive+0xcc>
            if (timeout<10) alt_busy_sleep(10000);
   213e0:	808002a8 	cmpgeui	r2,r16,10
   213e4:	1000021e 	bne	r2,zero,213f0 <alt_avalon_i2c_master_receive+0xbc>
   213e8:	0109c404 	movi	r4,10000
   213ec:	0021ef80 	call	21ef8 <alt_busy_sleep>
            if (--timeout == 0)
   213f0:	843fffc4 	addi	r16,r16,-1
   213f4:	803ff71e 	bne	r16,zero,213d4 <alt_avalon_i2c_master_receive+0xa0>
               status = ALT_AVALON_I2C_TIMEOUT;
   213f8:	00bfff84 	movi	r2,-2
   213fc:	d8800015 	stw	r2,0(sp)
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   21400:	8809883a 	mov	r4,r17
   21404:	d80b883a 	mov	r5,sp
   21408:	00210840 	call	21084 <alt_avalon_i2c_check_nack>
        alt_avalon_i2c_disable(i2c_dev);
   2140c:	8809883a 	mov	r4,r17
   21410:	0020e280 	call	20e28 <alt_avalon_i2c_disable>
   21414:	00002806 	br	214b8 <alt_avalon_i2c_master_receive+0x184>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21418:	d9c00017 	ldw	r7,0(sp)
   2141c:	8809883a 	mov	r4,r17
            bytes_written++;
   21420:	9cc00044 	addi	r19,r19,1
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21424:	380d883a 	mov	r6,r7
   21428:	380b883a 	mov	r5,r7
   2142c:	00210bc0 	call	210bc <alt_avalon_i2c_cmd_write>
   21430:	d8800015 	stw	r2,0(sp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   21434:	1000081e 	bne	r2,zero,21458 <alt_avalon_i2c_master_receive+0x124>
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   21438:	100d883a 	mov	r6,r2
   2143c:	900b883a 	mov	r5,r18
   21440:	d9c00104 	addi	r7,sp,4
   21444:	8809883a 	mov	r4,r17
   21448:	0020fc00 	call	20fc0 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   2144c:	d8800117 	ldw	r2,4(sp)
   21450:	90a5883a 	add	r18,r18,r2
               bytes_read+=temp_bytes_read;
   21454:	80a1883a 	add	r16,r16,r2
   21458:	d8800017 	ldw	r2,0(sp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2145c:	9d80052e 	bgeu	r19,r22,21474 <alt_avalon_i2c_master_receive+0x140>
   21460:	103fed26 	beq	r2,zero,21418 <alt_avalon_i2c_master_receive+0xe4>
   21464:	003fd206 	br	213b0 <alt_avalon_i2c_master_receive+0x7c>
    alt_u32 bytes_read=0;
   21468:	dc000017 	ldw	r16,0(sp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2146c:	a5bfffc4 	addi	r22,r20,-1
   21470:	003ff906 	br	21458 <alt_avalon_i2c_master_receive+0x124>
        if (status == ALT_AVALON_I2C_SUCCESS)
   21474:	103fce1e 	bne	r2,zero,213b0 <alt_avalon_i2c_master_receive+0x7c>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21478:	d9800017 	ldw	r6,0(sp)
   2147c:	a9c03fcc 	andi	r7,r21,255
   21480:	8809883a 	mov	r4,r17
   21484:	300b883a 	mov	r5,r6
   21488:	00210bc0 	call	210bc <alt_avalon_i2c_cmd_write>
   2148c:	d8800015 	stw	r2,0(sp)
   21490:	003fc706 	br	213b0 <alt_avalon_i2c_master_receive+0x7c>
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   21494:	8809883a 	mov	r4,r17
   21498:	0020ff80 	call	20ff8 <alt_avalon_i2c_rx_read>
   2149c:	d8800015 	stw	r2,0(sp)
        bytes_read++;
   214a0:	84000044 	addi	r16,r16,1
   214a4:	003fc306 	br	213b4 <alt_avalon_i2c_master_receive+0x80>
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   214a8:	ad403fcc 	andi	r21,r21,255
   214ac:	a83fc51e 	bne	r21,zero,213c4 <alt_avalon_i2c_master_receive+0x90>
   214b0:	d8800017 	ldw	r2,0(sp)
   214b4:	103fc31e 	bne	r2,zero,213c4 <alt_avalon_i2c_master_receive+0x90>
    return status;
   214b8:	d8800017 	ldw	r2,0(sp)
}
   214bc:	dfc00917 	ldw	ra,36(sp)
   214c0:	dd800817 	ldw	r22,32(sp)
   214c4:	dd400717 	ldw	r21,28(sp)
   214c8:	dd000617 	ldw	r20,24(sp)
   214cc:	dcc00517 	ldw	r19,20(sp)
   214d0:	dc800417 	ldw	r18,16(sp)
   214d4:	dc400317 	ldw	r17,12(sp)
   214d8:	dc000217 	ldw	r16,8(sp)
   214dc:	dec00a04 	addi	sp,sp,40
   214e0:	f800283a 	ret
      return ALT_AVALON_I2C_SUCCESS;
   214e4:	0005883a 	mov	r2,zero
   214e8:	003ff406 	br	214bc <alt_avalon_i2c_master_receive+0x188>

000214ec <alt_avalon_i2c_int_status_get>:
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   214ec:	20c00317 	ldw	r3,12(r4)
   214f0:	18800437 	ldwio	r2,16(r3)
   214f4:	18c00337 	ldwio	r3,12(r3)
   214f8:	10c4703a 	and	r2,r2,r3
   214fc:	28800015 	stw	r2,0(r5)
}
   21500:	f800283a 	ret

00021504 <alt_avalon_i2c_int_raw_status_get>:
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   21504:	20800317 	ldw	r2,12(r4)
   21508:	10800437 	ldwio	r2,16(r2)
   2150c:	28800015 	stw	r2,0(r5)
}
   21510:	f800283a 	ret

00021514 <alt_avalon_i2c_int_clear>:
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   21514:	20800317 	ldw	r2,12(r4)
   21518:	11400435 	stwio	r5,16(r2)
}
   2151c:	f800283a 	ret

00021520 <alt_avalon_i2c_enabled_ints_get>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   21520:	20800317 	ldw	r2,12(r4)
   21524:	10800337 	ldwio	r2,12(r2)
   21528:	108007cc 	andi	r2,r2,31
   2152c:	28800015 	stw	r2,0(r5)
}
   21530:	f800283a 	ret

00021534 <alt_avalon_i2c_int_disable>:
{
   21534:	defffc04 	addi	sp,sp,-16
   21538:	dc000115 	stw	r16,4(sp)
   2153c:	2821883a 	mov	r16,r5
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   21540:	d80b883a 	mov	r5,sp
{
   21544:	dc400215 	stw	r17,8(sp)
   21548:	dfc00315 	stw	ra,12(sp)
   2154c:	2023883a 	mov	r17,r4
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   21550:	00215200 	call	21520 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   21554:	d8800017 	ldw	r2,0(sp)
   21558:	0420303a 	nor	r16,zero,r16
   2155c:	80a0703a 	and	r16,r16,r2
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   21560:	88800317 	ldw	r2,12(r17)
   21564:	840007cc 	andi	r16,r16,31
   21568:	14000335 	stwio	r16,12(r2)
}
   2156c:	dfc00317 	ldw	ra,12(sp)
   21570:	dc400217 	ldw	r17,8(sp)
   21574:	dc000117 	ldw	r16,4(sp)
   21578:	dec00404 	addi	sp,sp,16
   2157c:	f800283a 	ret

00021580 <alt_avalon_i2c_irq>:
{
   21580:	defffd04 	addi	sp,sp,-12
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   21584:	014007c4 	movi	r5,31
{
   21588:	dc000015 	stw	r16,0(sp)
   2158c:	dfc00215 	stw	ra,8(sp)
   21590:	2021883a 	mov	r16,r4
   21594:	dc400115 	stw	r17,4(sp)
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   21598:	00215340 	call	21534 <alt_avalon_i2c_int_disable>
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   2159c:	80800317 	ldw	r2,12(r16)
   215a0:	00c00704 	movi	r3,28
   215a4:	10c00435 	stwio	r3,16(r2)
    if(dev->callback) 
   215a8:	80c00617 	ldw	r3,24(r16)
   215ac:	18000726 	beq	r3,zero,215cc <alt_avalon_i2c_irq+0x4c>
  NIOS2_READ_STATUS (context);
   215b0:	0023303a 	rdctl	r17,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   215b4:	00bfff84 	movi	r2,-2
   215b8:	8884703a 	and	r2,r17,r2
   215bc:	1001703a 	wrctl	status,r2
        dev->callback(dev);
   215c0:	8009883a 	mov	r4,r16
   215c4:	183ee83a 	callr	r3
  NIOS2_WRITE_STATUS (context);
   215c8:	8801703a 	wrctl	status,r17
}
   215cc:	dfc00217 	ldw	ra,8(sp)
   215d0:	dc400117 	ldw	r17,4(sp)
   215d4:	dc000017 	ldw	r16,0(sp)
   215d8:	dec00304 	addi	sp,sp,12
   215dc:	f800283a 	ret

000215e0 <alt_avalon_i2c_int_enable>:
{
   215e0:	defffc04 	addi	sp,sp,-16
   215e4:	dc000115 	stw	r16,4(sp)
   215e8:	2821883a 	mov	r16,r5
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   215ec:	d80b883a 	mov	r5,sp
{
   215f0:	dc400215 	stw	r17,8(sp)
   215f4:	dfc00315 	stw	ra,12(sp)
   215f8:	2023883a 	mov	r17,r4
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   215fc:	00215200 	call	21520 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   21600:	d8800017 	ldw	r2,0(sp)
   21604:	80a0b03a 	or	r16,r16,r2
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   21608:	88800317 	ldw	r2,12(r17)
   2160c:	840007cc 	andi	r16,r16,31
   21610:	14000335 	stwio	r16,12(r2)
}
   21614:	dfc00317 	ldw	ra,12(sp)
   21618:	dc400217 	ldw	r17,8(sp)
   2161c:	dc000117 	ldw	r16,4(sp)
   21620:	dec00404 	addi	sp,sp,16
   21624:	f800283a 	ret

00021628 <optional_irq_callback>:
{
   21628:	defffb04 	addi	sp,sp,-20
   2162c:	dc000115 	stw	r16,4(sp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   21630:	24000717 	ldw	r16,28(r4)
{
   21634:	dc400215 	stw	r17,8(sp)
   21638:	dfc00415 	stw	ra,16(sp)
   if (irq->irq_busy==2)  /*receive request*/
   2163c:	80800217 	ldw	r2,8(r16)
{
   21640:	dc800315 	stw	r18,12(sp)
   21644:	2023883a 	mov	r17,r4
   if (irq->irq_busy==2)  /*receive request*/
   21648:	10800098 	cmpnei	r2,r2,2
   2164c:	1000181e 	bne	r2,zero,216b0 <optional_irq_callback+0x88>
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   21650:	81800117 	ldw	r6,4(r16)
   21654:	81400017 	ldw	r5,0(r16)
   21658:	d80f883a 	mov	r7,sp
   2165c:	0020fc00 	call	20fc0 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   21660:	d9000017 	ldw	r4,0(sp)
   21664:	80800117 	ldw	r2,4(r16)
       irq->buffer+=bytes_read;
   21668:	80c00017 	ldw	r3,0(r16)
       irq->size-=bytes_read;
   2166c:	1105c83a 	sub	r2,r2,r4
       irq->buffer+=bytes_read;
   21670:	1907883a 	add	r3,r3,r4
       irq->size-=bytes_read;
   21674:	80800115 	stw	r2,4(r16)
       irq->buffer+=bytes_read;
   21678:	80c00015 	stw	r3,0(r16)
       if (irq->size > 0)
   2167c:	10000c26 	beq	r2,zero,216b0 <optional_irq_callback+0x88>
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   21680:	88800317 	ldw	r2,12(r17)
   21684:	00c00704 	movi	r3,28
   21688:	10c00435 	stwio	r3,16(r2)
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   2168c:	01400084 	movi	r5,2
   21690:	8809883a 	mov	r4,r17
   21694:	00215e00 	call	215e0 <alt_avalon_i2c_int_enable>
}
   21698:	dfc00417 	ldw	ra,16(sp)
   2169c:	dc800317 	ldw	r18,12(sp)
   216a0:	dc400217 	ldw	r17,8(sp)
   216a4:	dc000117 	ldw	r16,4(sp)
   216a8:	dec00504 	addi	sp,sp,20
   216ac:	f800283a 	ret
{
   216b0:	048000b4 	movhi	r18,2
   216b4:	94a1a804 	addi	r18,r18,-31072
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   216b8:	8809883a 	mov	r4,r17
   216bc:	0020fb00 	call	20fb0 <alt_avalon_i2c_is_busy>
   216c0:	10000226 	beq	r2,zero,216cc <optional_irq_callback+0xa4>
      if (--timeout == 0)
   216c4:	94bfffc4 	addi	r18,r18,-1
   216c8:	903ffb1e 	bne	r18,zero,216b8 <optional_irq_callback+0x90>
    alt_avalon_i2c_disable(i2c_dev);
   216cc:	8809883a 	mov	r4,r17
   216d0:	0020e280 	call	20e28 <alt_avalon_i2c_disable>
    irq->irq_busy=0;
   216d4:	80000215 	stw	zero,8(r16)
   216d8:	003fef06 	br	21698 <optional_irq_callback+0x70>

000216dc <alt_avalon_i2c_interrupt_transaction_status>:
{
   216dc:	defff904 	addi	sp,sp,-28
   216e0:	dc400415 	stw	r17,16(sp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   216e4:	24400717 	ldw	r17,28(r4)
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   216e8:	d9400104 	addi	r5,sp,4
{
   216ec:	dfc00615 	stw	ra,24(sp)
   216f0:	dc800515 	stw	r18,20(sp)
   216f4:	dc000315 	stw	r16,12(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   216f8:	d8000015 	stw	zero,0(sp)
{
   216fc:	2021883a 	mov	r16,r4
    alt_u32 timeout=10000 * irq_data->size + 10000;
   21700:	8c800117 	ldw	r18,4(r17)
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   21704:	00215200 	call	21520 <alt_avalon_i2c_enabled_ints_get>
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   21708:	d9400117 	ldw	r5,4(sp)
   2170c:	8009883a 	mov	r4,r16
   21710:	00215340 	call	21534 <alt_avalon_i2c_int_disable>
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   21714:	d80b883a 	mov	r5,sp
   21718:	8009883a 	mov	r4,r16
   2171c:	00210840 	call	21084 <alt_avalon_i2c_check_nack>
    if (status!=ALT_AVALON_I2C_SUCCESS)
   21720:	d8800017 	ldw	r2,0(sp)
   21724:	10002126 	beq	r2,zero,217ac <alt_avalon_i2c_interrupt_transaction_status+0xd0>
      if (irq_data->irq_busy)
   21728:	88800217 	ldw	r2,8(r17)
   2172c:	1000071e 	bne	r2,zero,2174c <alt_avalon_i2c_interrupt_transaction_status+0x70>
      return status;
   21730:	d8800017 	ldw	r2,0(sp)
}
   21734:	dfc00617 	ldw	ra,24(sp)
   21738:	dc800517 	ldw	r18,20(sp)
   2173c:	dc400417 	ldw	r17,16(sp)
   21740:	dc000317 	ldw	r16,12(sp)
   21744:	dec00704 	addi	sp,sp,28
   21748:	f800283a 	ret
    alt_u32 timeout=10000 * irq_data->size + 10000;
   2174c:	91000044 	addi	r4,r18,1
   21750:	0149c404 	movi	r5,10000
   21754:	0020c1c0 	call	20c1c <__mulsi3>
   21758:	1025883a 	mov	r18,r2
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2175c:	8009883a 	mov	r4,r16
   21760:	0020fb00 	call	20fb0 <alt_avalon_i2c_is_busy>
   21764:	10000826 	beq	r2,zero,21788 <alt_avalon_i2c_interrupt_transaction_status+0xac>
              if (timeout<10) alt_busy_sleep(10000);
   21768:	908002a8 	cmpgeui	r2,r18,10
   2176c:	1000021e 	bne	r2,zero,21778 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   21770:	0109c404 	movi	r4,10000
   21774:	0021ef80 	call	21ef8 <alt_busy_sleep>
              if (--timeout == 0)
   21778:	94bfffc4 	addi	r18,r18,-1
   2177c:	903ff71e 	bne	r18,zero,2175c <alt_avalon_i2c_interrupt_transaction_status+0x80>
                 status = ALT_AVALON_I2C_TIMEOUT;
   21780:	00bfff84 	movi	r2,-2
   21784:	d8800015 	stw	r2,0(sp)
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   21788:	89400017 	ldw	r5,0(r17)
   2178c:	d9c00204 	addi	r7,sp,8
   21790:	000d883a 	mov	r6,zero
   21794:	8009883a 	mov	r4,r16
   21798:	0020fc00 	call	20fc0 <alt_avalon_i2c_rx_read_available>
        alt_avalon_i2c_disable(i2c_dev);
   2179c:	8009883a 	mov	r4,r16
   217a0:	0020e280 	call	20e28 <alt_avalon_i2c_disable>
        irq_data->irq_busy=0;
   217a4:	88000215 	stw	zero,8(r17)
   217a8:	003fe106 	br	21730 <alt_avalon_i2c_interrupt_transaction_status+0x54>
    if (irq_data->irq_busy)
   217ac:	88800217 	ldw	r2,8(r17)
   217b0:	103fe026 	beq	r2,zero,21734 <alt_avalon_i2c_interrupt_transaction_status+0x58>
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   217b4:	d9400117 	ldw	r5,4(sp)
   217b8:	8009883a 	mov	r4,r16
   217bc:	00215e00 	call	215e0 <alt_avalon_i2c_int_enable>
        return ALT_AVALON_I2C_BUSY;
   217c0:	00bffe44 	movi	r2,-7
   217c4:	003fdb06 	br	21734 <alt_avalon_i2c_interrupt_transaction_status+0x58>

000217c8 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   217c8:	20800317 	ldw	r2,12(r4)
   217cc:	10800237 	ldwio	r2,8(r2)
   217d0:	1005d13a 	srai	r2,r2,4
   217d4:	108000cc 	andi	r2,r2,3
   217d8:	28800015 	stw	r2,0(r5)
}
   217dc:	f800283a 	ret

000217e0 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   217e0:	20c00317 	ldw	r3,12(r4)
   217e4:	18800237 	ldwio	r2,8(r3)
   217e8:	013ff3c4 	movi	r4,-49
   217ec:	280a913a 	slli	r5,r5,4
   217f0:	1104703a 	and	r2,r2,r4
   217f4:	29400c0c 	andi	r5,r5,48
   217f8:	288ab03a 	or	r5,r5,r2
   217fc:	19400235 	stwio	r5,8(r3)
}
   21800:	f800283a 	ret

00021804 <alt_avalon_i2c_master_receive_using_interrupts>:
{
   21804:	defff704 	addi	sp,sp,-36
   21808:	dd000415 	stw	r20,16(sp)
   2180c:	dfc00815 	stw	ra,32(sp)
   21810:	ddc00715 	stw	r23,28(sp)
   21814:	dd800615 	stw	r22,24(sp)
   21818:	dd400515 	stw	r21,20(sp)
   2181c:	dcc00315 	stw	r19,12(sp)
   21820:	dc800215 	stw	r18,8(sp)
   21824:	dc400115 	stw	r17,4(sp)
   21828:	dc000015 	stw	r16,0(sp)
   2182c:	dd000917 	ldw	r20,36(sp)
    if (size==0)
   21830:	30000d1e 	bne	r6,zero,21868 <alt_avalon_i2c_master_receive_using_interrupts+0x64>
      return ALT_AVALON_I2C_SUCCESS;
   21834:	0023883a 	mov	r17,zero
}
   21838:	8805883a 	mov	r2,r17
   2183c:	dfc00817 	ldw	ra,32(sp)
   21840:	ddc00717 	ldw	r23,28(sp)
   21844:	dd800617 	ldw	r22,24(sp)
   21848:	dd400517 	ldw	r21,20(sp)
   2184c:	dd000417 	ldw	r20,16(sp)
   21850:	dcc00317 	ldw	r19,12(sp)
   21854:	dc800217 	ldw	r18,8(sp)
   21858:	dc400117 	ldw	r17,4(sp)
   2185c:	dc000017 	ldw	r16,0(sp)
   21860:	dec00904 	addi	sp,sp,36
   21864:	f800283a 	ret
    if (i2c_dev->callback != optional_irq_callback)
   21868:	20c00617 	ldw	r3,24(r4)
   2186c:	008000b4 	movhi	r2,2
   21870:	10858a04 	addi	r2,r2,5672
   21874:	2021883a 	mov	r16,r4
   21878:	1880481e 	bne	r3,r2,2199c <alt_avalon_i2c_master_receive_using_interrupts+0x198>
    if (!issue_restart) 
   2187c:	3cc03fcc 	andi	r19,r7,255
   21880:	3025883a 	mov	r18,r6
   21884:	282d883a 	mov	r22,r5
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   21888:	25400717 	ldw	r21,28(r4)
    if (!issue_restart) 
   2188c:	9800061e 	bne	r19,zero,218a8 <alt_avalon_i2c_master_receive_using_interrupts+0xa4>
      status = alt_avalon_i2c_enable(i2c_dev);
   21890:	0020de40 	call	20de4 <alt_avalon_i2c_enable>
   21894:	1023883a 	mov	r17,r2
      if (status != ALT_AVALON_I2C_SUCCESS)
   21898:	103fe71e 	bne	r2,zero,21838 <alt_avalon_i2c_master_receive_using_interrupts+0x34>
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   2189c:	80800317 	ldw	r2,12(r16)
   218a0:	00c00704 	movi	r3,28
   218a4:	10c00435 	stwio	r3,16(r2)
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   218a8:	980d883a 	mov	r6,r19
   218ac:	01400044 	movi	r5,1
   218b0:	8009883a 	mov	r4,r16
   218b4:	002117c0 	call	2117c <alt_avalon_i2c_send_address>
   218b8:	1023883a 	mov	r17,r2
    if (status == ALT_AVALON_I2C_SUCCESS)
   218bc:	10001426 	beq	r2,zero,21910 <alt_avalon_i2c_master_receive_using_interrupts+0x10c>
        timeout=10000 * size;
   218c0:	9009883a 	mov	r4,r18
   218c4:	0149c404 	movi	r5,10000
   218c8:	0020c1c0 	call	20c1c <__mulsi3>
   218cc:	1025883a 	mov	r18,r2
        while (alt_avalon_i2c_is_busy(i2c_dev))
   218d0:	8009883a 	mov	r4,r16
   218d4:	0020fb00 	call	20fb0 <alt_avalon_i2c_is_busy>
   218d8:	1000281e 	bne	r2,zero,2197c <alt_avalon_i2c_master_receive_using_interrupts+0x178>
        alt_avalon_i2c_disable(i2c_dev);
   218dc:	8009883a 	mov	r4,r16
   218e0:	0020e280 	call	20e28 <alt_avalon_i2c_disable>
   218e4:	003fd406 	br	21838 <alt_avalon_i2c_master_receive_using_interrupts+0x34>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   218e8:	000f883a 	mov	r7,zero
   218ec:	000d883a 	mov	r6,zero
   218f0:	000b883a 	mov	r5,zero
   218f4:	8009883a 	mov	r4,r16
   218f8:	00210bc0 	call	210bc <alt_avalon_i2c_cmd_write>
   218fc:	1023883a 	mov	r17,r2
            bytes_written++;
   21900:	9cc00044 	addi	r19,r19,1
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   21904:	9dc0052e 	bgeu	r19,r23,2191c <alt_avalon_i2c_master_receive_using_interrupts+0x118>
   21908:	883ff726 	beq	r17,zero,218e8 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
   2190c:	003fec06 	br	218c0 <alt_avalon_i2c_master_receive_using_interrupts+0xbc>
    alt_u32 bytes_written=0;
   21910:	0027883a 	mov	r19,zero
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   21914:	95ffffc4 	addi	r23,r18,-1
   21918:	003ffa06 	br	21904 <alt_avalon_i2c_master_receive_using_interrupts+0x100>
        if (status == ALT_AVALON_I2C_SUCCESS)
   2191c:	883fe81e 	bne	r17,zero,218c0 <alt_avalon_i2c_master_receive_using_interrupts+0xbc>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21920:	a5003fcc 	andi	r20,r20,255
   21924:	a00f883a 	mov	r7,r20
   21928:	000d883a 	mov	r6,zero
   2192c:	000b883a 	mov	r5,zero
   21930:	8009883a 	mov	r4,r16
   21934:	00210bc0 	call	210bc <alt_avalon_i2c_cmd_write>
   21938:	1023883a 	mov	r17,r2
    if (status != ALT_AVALON_I2C_SUCCESS) 
   2193c:	103fe01e 	bne	r2,zero,218c0 <alt_avalon_i2c_master_receive_using_interrupts+0xbc>
       if (issue_stop)
   21940:	a03fbc26 	beq	r20,zero,21834 <alt_avalon_i2c_master_receive_using_interrupts+0x30>
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   21944:	80800317 	ldw	r2,12(r16)
   21948:	00c00704 	movi	r3,28
   2194c:	10c00435 	stwio	r3,16(r2)
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   21950:	8009883a 	mov	r4,r16
   21954:	000b883a 	mov	r5,zero
   21958:	00217e00 	call	217e0 <alt_avalon_i2c_rx_fifo_threshold_set>
         irq_data->irq_busy=2;
   2195c:	00800084 	movi	r2,2
   21960:	a8800215 	stw	r2,8(r21)
         irq_data->buffer = buffer;
   21964:	ad800015 	stw	r22,0(r21)
         irq_data->size = size;
   21968:	ac800115 	stw	r18,4(r21)
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   2196c:	01400084 	movi	r5,2
   21970:	8009883a 	mov	r4,r16
   21974:	00215e00 	call	215e0 <alt_avalon_i2c_int_enable>
   21978:	003faf06 	br	21838 <alt_avalon_i2c_master_receive_using_interrupts+0x34>
            if (timeout<10) alt_busy_sleep(10000);
   2197c:	908002a8 	cmpgeui	r2,r18,10
   21980:	1000021e 	bne	r2,zero,2198c <alt_avalon_i2c_master_receive_using_interrupts+0x188>
   21984:	0109c404 	movi	r4,10000
   21988:	0021ef80 	call	21ef8 <alt_busy_sleep>
            if (--timeout == 0)
   2198c:	94bfffc4 	addi	r18,r18,-1
   21990:	903fcf1e 	bne	r18,zero,218d0 <alt_avalon_i2c_master_receive_using_interrupts+0xcc>
               status = ALT_AVALON_I2C_TIMEOUT;
   21994:	047fff84 	movi	r17,-2
   21998:	003fd006 	br	218dc <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
       return ALT_AVALON_I2C_BAD_ARG;    
   2199c:	047fff44 	movi	r17,-3
   219a0:	003fa506 	br	21838 <alt_avalon_i2c_master_receive_using_interrupts+0x34>

000219a4 <alt_avalon_i2c_master_rx>:
{
   219a4:	defff904 	addi	sp,sp,-28
   219a8:	dd000515 	stw	r20,20(sp)
   219ac:	dcc00415 	stw	r19,16(sp)
   219b0:	dc800315 	stw	r18,12(sp)
   219b4:	dc400215 	stw	r17,8(sp)
   219b8:	dc000115 	stw	r16,4(sp)
   219bc:	dfc00615 	stw	ra,24(sp)
    if (use_interrupts) 
   219c0:	39c03fcc 	andi	r7,r7,255
{
   219c4:	2023883a 	mov	r17,r4
   219c8:	2825883a 	mov	r18,r5
   219cc:	3027883a 	mov	r19,r6
    alt_u32 retry=10000;  
   219d0:	0409c404 	movi	r16,10000
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   219d4:	05000044 	movi	r20,1
    if (use_interrupts) 
   219d8:	38001e1e 	bne	r7,zero,21a54 <alt_avalon_i2c_master_rx+0xb0>
      while (retry--) 
   219dc:	843fffc4 	addi	r16,r16,-1
   219e0:	80ffffd8 	cmpnei	r3,r16,-1
   219e4:	18001e26 	beq	r3,zero,21a60 <alt_avalon_i2c_master_rx+0xbc>
        if (retry<10) alt_busy_sleep(10000);      
   219e8:	808002a8 	cmpgeui	r2,r16,10
   219ec:	1000021e 	bne	r2,zero,219f8 <alt_avalon_i2c_master_rx+0x54>
   219f0:	0109c404 	movi	r4,10000
   219f4:	0021ef80 	call	21ef8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   219f8:	dd000015 	stw	r20,0(sp)
   219fc:	000f883a 	mov	r7,zero
   21a00:	980d883a 	mov	r6,r19
   21a04:	900b883a 	mov	r5,r18
   21a08:	8809883a 	mov	r4,r17
   21a0c:	00213340 	call	21334 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21a10:	10c001c4 	addi	r3,r2,7
   21a14:	18c000e8 	cmpgeui	r3,r3,3
   21a18:	1800111e 	bne	r3,zero,21a60 <alt_avalon_i2c_master_rx+0xbc>
   21a1c:	003fef06 	br	219dc <alt_avalon_i2c_master_rx+0x38>
        if (retry<10) alt_busy_sleep(10000);      
   21a20:	808002a8 	cmpgeui	r2,r16,10
   21a24:	1000021e 	bne	r2,zero,21a30 <alt_avalon_i2c_master_rx+0x8c>
   21a28:	0109c404 	movi	r4,10000
   21a2c:	0021ef80 	call	21ef8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   21a30:	dd000015 	stw	r20,0(sp)
   21a34:	000f883a 	mov	r7,zero
   21a38:	980d883a 	mov	r6,r19
   21a3c:	900b883a 	mov	r5,r18
   21a40:	8809883a 	mov	r4,r17
   21a44:	00218040 	call	21804 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21a48:	10c001c4 	addi	r3,r2,7
   21a4c:	18c000e8 	cmpgeui	r3,r3,3
   21a50:	1800031e 	bne	r3,zero,21a60 <alt_avalon_i2c_master_rx+0xbc>
      while (retry--) 
   21a54:	843fffc4 	addi	r16,r16,-1
   21a58:	80ffffd8 	cmpnei	r3,r16,-1
   21a5c:	183ff01e 	bne	r3,zero,21a20 <alt_avalon_i2c_master_rx+0x7c>
}        
   21a60:	dfc00617 	ldw	ra,24(sp)
   21a64:	dd000517 	ldw	r20,20(sp)
   21a68:	dcc00417 	ldw	r19,16(sp)
   21a6c:	dc800317 	ldw	r18,12(sp)
   21a70:	dc400217 	ldw	r17,8(sp)
   21a74:	dc000117 	ldw	r16,4(sp)
   21a78:	dec00704 	addi	sp,sp,28
   21a7c:	f800283a 	ret

00021a80 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   21a80:	20800317 	ldw	r2,12(r4)
   21a84:	10800237 	ldwio	r2,8(r2)
   21a88:	1005d0ba 	srai	r2,r2,2
   21a8c:	108000cc 	andi	r2,r2,3
   21a90:	28800015 	stw	r2,0(r5)
}
   21a94:	f800283a 	ret

00021a98 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   21a98:	20c00317 	ldw	r3,12(r4)
   21a9c:	18800237 	ldwio	r2,8(r3)
   21aa0:	013ffcc4 	movi	r4,-13
   21aa4:	280a90ba 	slli	r5,r5,2
   21aa8:	1104703a 	and	r2,r2,r4
   21aac:	2940030c 	andi	r5,r5,12
   21ab0:	288ab03a 	or	r5,r5,r2
   21ab4:	19400235 	stwio	r5,8(r3)
}
   21ab8:	f800283a 	ret

00021abc <alt_avalon_i2c_init>:
{
   21abc:	defff904 	addi	sp,sp,-28
   21ac0:	dfc00615 	stw	ra,24(sp)
   21ac4:	dc000515 	stw	r16,20(sp)
   21ac8:	2021883a 	mov	r16,r4
    alt_avalon_i2c_disable(dev);
   21acc:	0020e280 	call	20e28 <alt_avalon_i2c_disable>
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   21ad0:	014007c4 	movi	r5,31
   21ad4:	8009883a 	mov	r4,r16
   21ad8:	00215340 	call	21534 <alt_avalon_i2c_int_disable>
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   21adc:	80800317 	ldw	r2,12(r16)
   21ae0:	00c00704 	movi	r3,28
   21ae4:	10c00435 	stwio	r3,16(r2)
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   21ae8:	8009883a 	mov	r4,r16
   21aec:	014000c4 	movi	r5,3
   21af0:	0021a980 	call	21a98 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   21af4:	8009883a 	mov	r4,r16
   21af8:	014000c4 	movi	r5,3
   21afc:	00217e00 	call	217e0 <alt_avalon_i2c_rx_fifo_threshold_set>
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   21b00:	018000b4 	movhi	r6,2
   21b04:	31a1a804 	addi	r6,r6,-31072
   21b08:	d9400104 	addi	r5,sp,4
   21b0c:	8009883a 	mov	r4,r16
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   21b10:	d8000215 	stw	zero,8(sp)
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   21b14:	d8000115 	stw	zero,4(sp)
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   21b18:	0020f240 	call	20f24 <alt_avalon_i2c_master_config_speed_set>
    alt_avalon_i2c_master_config_set(dev,&cfg);
   21b1c:	d9400104 	addi	r5,sp,4
   21b20:	8009883a 	mov	r4,r16
   21b24:	0020e840 	call	20e84 <alt_avalon_i2c_master_config_set>
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   21b28:	8009883a 	mov	r4,r16
   21b2c:	d1600304 	addi	r5,gp,-32756
   21b30:	0021f840 	call	21f84 <alt_dev_llist_insert>
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   21b34:	d8000015 	stw	zero,0(sp)
   21b38:	81400517 	ldw	r5,20(r16)
   21b3c:	81000417 	ldw	r4,16(r16)
   21b40:	018000b4 	movhi	r6,2
   21b44:	800f883a 	mov	r7,r16
   21b48:	31856004 	addi	r6,r6,5504
   21b4c:	00220640 	call	22064 <alt_ic_isr_register>
}
   21b50:	dfc00617 	ldw	ra,24(sp)
   21b54:	dc000517 	ldw	r16,20(sp)
   21b58:	dec00704 	addi	sp,sp,28
   21b5c:	f800283a 	ret

00021b60 <alt_avalon_i2c_master_transmit_using_interrupts>:
{
   21b60:	defff804 	addi	sp,sp,-32
   21b64:	dcc00315 	stw	r19,12(sp)
   21b68:	dfc00715 	stw	ra,28(sp)
   21b6c:	dd800615 	stw	r22,24(sp)
   21b70:	dd400515 	stw	r21,20(sp)
   21b74:	dd000415 	stw	r20,16(sp)
   21b78:	dc800215 	stw	r18,8(sp)
   21b7c:	dc400115 	stw	r17,4(sp)
   21b80:	dc000015 	stw	r16,0(sp)
   21b84:	dcc00817 	ldw	r19,32(sp)
    if (size==0)
   21b88:	30000c1e 	bne	r6,zero,21bbc <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
      return ALT_AVALON_I2C_SUCCESS;
   21b8c:	0021883a 	mov	r16,zero
}
   21b90:	8005883a 	mov	r2,r16
   21b94:	dfc00717 	ldw	ra,28(sp)
   21b98:	dd800617 	ldw	r22,24(sp)
   21b9c:	dd400517 	ldw	r21,20(sp)
   21ba0:	dd000417 	ldw	r20,16(sp)
   21ba4:	dcc00317 	ldw	r19,12(sp)
   21ba8:	dc800217 	ldw	r18,8(sp)
   21bac:	dc400117 	ldw	r17,4(sp)
   21bb0:	dc000017 	ldw	r16,0(sp)
   21bb4:	dec00804 	addi	sp,sp,32
   21bb8:	f800283a 	ret
    if (i2c_dev->callback != optional_irq_callback)
   21bbc:	20c00617 	ldw	r3,24(r4)
   21bc0:	008000b4 	movhi	r2,2
   21bc4:	10858a04 	addi	r2,r2,5672
   21bc8:	2023883a 	mov	r17,r4
   21bcc:	1880451e 	bne	r3,r2,21ce4 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
    if (!issue_restart) 
   21bd0:	3d003fcc 	andi	r20,r7,255
   21bd4:	2825883a 	mov	r18,r5
   21bd8:	302b883a 	mov	r21,r6
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   21bdc:	25800717 	ldw	r22,28(r4)
    if (!issue_restart) 
   21be0:	a000061e 	bne	r20,zero,21bfc <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      status = alt_avalon_i2c_enable(i2c_dev);
   21be4:	0020de40 	call	20de4 <alt_avalon_i2c_enable>
   21be8:	1021883a 	mov	r16,r2
      if (status != ALT_AVALON_I2C_SUCCESS)
   21bec:	103fe81e 	bne	r2,zero,21b90 <alt_avalon_i2c_master_transmit_using_interrupts+0x30>
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   21bf0:	88800317 	ldw	r2,12(r17)
   21bf4:	00c00704 	movi	r3,28
   21bf8:	10c00435 	stwio	r3,16(r2)
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   21bfc:	a00d883a 	mov	r6,r20
   21c00:	000b883a 	mov	r5,zero
   21c04:	8809883a 	mov	r4,r17
   21c08:	002117c0 	call	2117c <alt_avalon_i2c_send_address>
   21c0c:	1021883a 	mov	r16,r2
    if (status == ALT_AVALON_I2C_SUCCESS)
   21c10:	1000041e 	bne	r2,zero,21c24 <alt_avalon_i2c_master_transmit_using_interrupts+0xc4>
   21c14:	ad3fffc4 	addi	r20,r21,-1
   21c18:	9529883a 	add	r20,r18,r20
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21c1c:	95001326 	beq	r18,r20,21c6c <alt_avalon_i2c_master_transmit_using_interrupts+0x10c>
   21c20:	80000a26 	beq	r16,zero,21c4c <alt_avalon_i2c_master_transmit_using_interrupts+0xec>
    alt_u32 timeout=size*10000;
   21c24:	0149c404 	movi	r5,10000
   21c28:	a809883a 	mov	r4,r21
   21c2c:	0020c1c0 	call	20c1c <__mulsi3>
   21c30:	1025883a 	mov	r18,r2
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21c34:	8809883a 	mov	r4,r17
   21c38:	0020fb00 	call	20fb0 <alt_avalon_i2c_is_busy>
   21c3c:	1000211e 	bne	r2,zero,21cc4 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        alt_avalon_i2c_disable(i2c_dev);
   21c40:	8809883a 	mov	r4,r17
   21c44:	0020e280 	call	20e28 <alt_avalon_i2c_disable>
   21c48:	003fd106 	br	21b90 <alt_avalon_i2c_master_transmit_using_interrupts+0x30>
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21c4c:	91400003 	ldbu	r5,0(r18)
   21c50:	000f883a 	mov	r7,zero
   21c54:	000d883a 	mov	r6,zero
   21c58:	8809883a 	mov	r4,r17
   21c5c:	00210bc0 	call	210bc <alt_avalon_i2c_cmd_write>
   21c60:	1021883a 	mov	r16,r2
            ++buffer;
   21c64:	94800044 	addi	r18,r18,1
            --size;
   21c68:	003fec06 	br	21c1c <alt_avalon_i2c_master_transmit_using_interrupts+0xbc>
        if (status == ALT_AVALON_I2C_SUCCESS)
   21c6c:	803fed1e 	bne	r16,zero,21c24 <alt_avalon_i2c_master_transmit_using_interrupts+0xc4>
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21c70:	91400003 	ldbu	r5,0(r18)
   21c74:	9cc03fcc 	andi	r19,r19,255
   21c78:	980f883a 	mov	r7,r19
   21c7c:	000d883a 	mov	r6,zero
   21c80:	8809883a 	mov	r4,r17
   21c84:	00210bc0 	call	210bc <alt_avalon_i2c_cmd_write>
   21c88:	1021883a 	mov	r16,r2
    if (status != ALT_AVALON_I2C_SUCCESS) 
   21c8c:	103fe51e 	bne	r2,zero,21c24 <alt_avalon_i2c_master_transmit_using_interrupts+0xc4>
       if (issue_stop)
   21c90:	983fbe26 	beq	r19,zero,21b8c <alt_avalon_i2c_master_transmit_using_interrupts+0x2c>
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   21c94:	88800317 	ldw	r2,12(r17)
   21c98:	00c00704 	movi	r3,28
   21c9c:	10c00435 	stwio	r3,16(r2)
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   21ca0:	8809883a 	mov	r4,r17
   21ca4:	000b883a 	mov	r5,zero
   21ca8:	0021a980 	call	21a98 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         irq_data->irq_busy=1;
   21cac:	00800044 	movi	r2,1
   21cb0:	b0800215 	stw	r2,8(r22)
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   21cb4:	01400044 	movi	r5,1
   21cb8:	8809883a 	mov	r4,r17
   21cbc:	00215e00 	call	215e0 <alt_avalon_i2c_int_enable>
   21cc0:	003fb306 	br	21b90 <alt_avalon_i2c_master_transmit_using_interrupts+0x30>
            if (timeout<10) alt_busy_sleep(10000);        
   21cc4:	908002a8 	cmpgeui	r2,r18,10
   21cc8:	1000021e 	bne	r2,zero,21cd4 <alt_avalon_i2c_master_transmit_using_interrupts+0x174>
   21ccc:	0109c404 	movi	r4,10000
   21cd0:	0021ef80 	call	21ef8 <alt_busy_sleep>
            if (--timeout == 0)
   21cd4:	94bfffc4 	addi	r18,r18,-1
   21cd8:	903fd61e 	bne	r18,zero,21c34 <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
               status = ALT_AVALON_I2C_TIMEOUT;
   21cdc:	043fff84 	movi	r16,-2
   21ce0:	003fd706 	br	21c40 <alt_avalon_i2c_master_transmit_using_interrupts+0xe0>
       return ALT_AVALON_I2C_BAD_ARG;    
   21ce4:	043fff44 	movi	r16,-3
   21ce8:	003fa906 	br	21b90 <alt_avalon_i2c_master_transmit_using_interrupts+0x30>

00021cec <alt_avalon_i2c_master_tx>:
{
   21cec:	defff804 	addi	sp,sp,-32
   21cf0:	dd400615 	stw	r21,24(sp)
   21cf4:	dd000515 	stw	r20,20(sp)
   21cf8:	dcc00415 	stw	r19,16(sp)
   21cfc:	dc800315 	stw	r18,12(sp)
   21d00:	dc400215 	stw	r17,8(sp)
   21d04:	dc000115 	stw	r16,4(sp)
   21d08:	dfc00715 	stw	ra,28(sp)
   21d0c:	2023883a 	mov	r17,r4
   21d10:	2825883a 	mov	r18,r5
   21d14:	3027883a 	mov	r19,r6
    while (retry--)
   21d18:	0005883a 	mov	r2,zero
    alt_u32 retry=10000;  
   21d1c:	0409c404 	movi	r16,10000
      if (use_interrupts)
   21d20:	3d403fcc 	andi	r21,r7,255
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   21d24:	05000044 	movi	r20,1
    while (retry--)
   21d28:	843fffc4 	addi	r16,r16,-1
   21d2c:	80ffffd8 	cmpnei	r3,r16,-1
   21d30:	18000e26 	beq	r3,zero,21d6c <alt_avalon_i2c_master_tx+0x80>
      if (retry<10) alt_busy_sleep(10000);
   21d34:	808002a8 	cmpgeui	r2,r16,10
   21d38:	1000021e 	bne	r2,zero,21d44 <alt_avalon_i2c_master_tx+0x58>
   21d3c:	0109c404 	movi	r4,10000
   21d40:	0021ef80 	call	21ef8 <alt_busy_sleep>
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   21d44:	dd000015 	stw	r20,0(sp)
   21d48:	000f883a 	mov	r7,zero
   21d4c:	980d883a 	mov	r6,r19
   21d50:	900b883a 	mov	r5,r18
   21d54:	8809883a 	mov	r4,r17
      if (use_interrupts)
   21d58:	a8000d26 	beq	r21,zero,21d90 <alt_avalon_i2c_master_tx+0xa4>
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   21d5c:	0021b600 	call	21b60 <alt_avalon_i2c_master_transmit_using_interrupts>
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21d60:	10c001c4 	addi	r3,r2,7
   21d64:	18c000e8 	cmpgeui	r3,r3,3
   21d68:	183fef26 	beq	r3,zero,21d28 <alt_avalon_i2c_master_tx+0x3c>
}        
   21d6c:	dfc00717 	ldw	ra,28(sp)
   21d70:	dd400617 	ldw	r21,24(sp)
   21d74:	dd000517 	ldw	r20,20(sp)
   21d78:	dcc00417 	ldw	r19,16(sp)
   21d7c:	dc800317 	ldw	r18,12(sp)
   21d80:	dc400217 	ldw	r17,8(sp)
   21d84:	dc000117 	ldw	r16,4(sp)
   21d88:	dec00804 	addi	sp,sp,32
   21d8c:	f800283a 	ret
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   21d90:	00211ec0 	call	211ec <alt_avalon_i2c_master_transmit>
   21d94:	003ff206 	br	21d60 <alt_avalon_i2c_master_tx+0x74>

00021d98 <alt_avalon_i2c_master_tx_rx>:
{
   21d98:	defff804 	addi	sp,sp,-32
    if (use_interrupts)
   21d9c:	d8c00903 	ldbu	r3,36(sp)
{
   21da0:	dd400615 	stw	r21,24(sp)
   21da4:	dd000515 	stw	r20,20(sp)
   21da8:	dcc00415 	stw	r19,16(sp)
   21dac:	dc800315 	stw	r18,12(sp)
   21db0:	dc400215 	stw	r17,8(sp)
   21db4:	dc000115 	stw	r16,4(sp)
   21db8:	dfc00715 	stw	ra,28(sp)
   21dbc:	2023883a 	mov	r17,r4
   21dc0:	2825883a 	mov	r18,r5
   21dc4:	3027883a 	mov	r19,r6
   21dc8:	3829883a 	mov	r20,r7
    alt_u32 retry=10000;  
   21dcc:	0409c404 	movi	r16,10000
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   21dd0:	05400044 	movi	r21,1
    if (use_interrupts)
   21dd4:	1800301e 	bne	r3,zero,21e98 <alt_avalon_i2c_master_tx_rx+0x100>
      while (retry--) 
   21dd8:	843fffc4 	addi	r16,r16,-1
   21ddc:	80ffffd8 	cmpnei	r3,r16,-1
   21de0:	18003026 	beq	r3,zero,21ea4 <alt_avalon_i2c_master_tx_rx+0x10c>
        if (retry<10) alt_busy_sleep(10000);      
   21de4:	808002a8 	cmpgeui	r2,r16,10
   21de8:	1000021e 	bne	r2,zero,21df4 <alt_avalon_i2c_master_tx_rx+0x5c>
   21dec:	0109c404 	movi	r4,10000
   21df0:	0021ef80 	call	21ef8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   21df4:	d8000015 	stw	zero,0(sp)
   21df8:	000f883a 	mov	r7,zero
   21dfc:	980d883a 	mov	r6,r19
   21e00:	900b883a 	mov	r5,r18
   21e04:	8809883a 	mov	r4,r17
   21e08:	00211ec0 	call	211ec <alt_avalon_i2c_master_transmit>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21e0c:	10c001c4 	addi	r3,r2,7
   21e10:	18c000f0 	cmpltui	r3,r3,3
   21e14:	183ff01e 	bne	r3,zero,21dd8 <alt_avalon_i2c_master_tx_rx+0x40>
        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   21e18:	d9800817 	ldw	r6,32(sp)
   21e1c:	dd400015 	stw	r21,0(sp)
   21e20:	01c00044 	movi	r7,1
   21e24:	a00b883a 	mov	r5,r20
   21e28:	8809883a 	mov	r4,r17
   21e2c:	00213340 	call	21334 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21e30:	10c001c4 	addi	r3,r2,7
   21e34:	18c000e8 	cmpgeui	r3,r3,3
   21e38:	18001a1e 	bne	r3,zero,21ea4 <alt_avalon_i2c_master_tx_rx+0x10c>
   21e3c:	003fe606 	br	21dd8 <alt_avalon_i2c_master_tx_rx+0x40>
        if (retry<10) alt_busy_sleep(10000);      
   21e40:	808002a8 	cmpgeui	r2,r16,10
   21e44:	1000021e 	bne	r2,zero,21e50 <alt_avalon_i2c_master_tx_rx+0xb8>
   21e48:	0109c404 	movi	r4,10000
   21e4c:	0021ef80 	call	21ef8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   21e50:	d8000015 	stw	zero,0(sp)
   21e54:	000f883a 	mov	r7,zero
   21e58:	980d883a 	mov	r6,r19
   21e5c:	900b883a 	mov	r5,r18
   21e60:	8809883a 	mov	r4,r17
   21e64:	0021b600 	call	21b60 <alt_avalon_i2c_master_transmit_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21e68:	10c001c4 	addi	r3,r2,7
   21e6c:	18c000f0 	cmpltui	r3,r3,3
   21e70:	1800091e 	bne	r3,zero,21e98 <alt_avalon_i2c_master_tx_rx+0x100>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   21e74:	d9800817 	ldw	r6,32(sp)
   21e78:	dd400015 	stw	r21,0(sp)
   21e7c:	01c00044 	movi	r7,1
   21e80:	a00b883a 	mov	r5,r20
   21e84:	8809883a 	mov	r4,r17
   21e88:	00218040 	call	21804 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21e8c:	10c001c4 	addi	r3,r2,7
   21e90:	18c000e8 	cmpgeui	r3,r3,3
   21e94:	1800031e 	bne	r3,zero,21ea4 <alt_avalon_i2c_master_tx_rx+0x10c>
      while (retry--) 
   21e98:	843fffc4 	addi	r16,r16,-1
   21e9c:	80ffffd8 	cmpnei	r3,r16,-1
   21ea0:	183fe71e 	bne	r3,zero,21e40 <alt_avalon_i2c_master_tx_rx+0xa8>
}                                       
   21ea4:	dfc00717 	ldw	ra,28(sp)
   21ea8:	dd400617 	ldw	r21,24(sp)
   21eac:	dd000517 	ldw	r20,20(sp)
   21eb0:	dcc00417 	ldw	r19,16(sp)
   21eb4:	dc800317 	ldw	r18,12(sp)
   21eb8:	dc400217 	ldw	r17,8(sp)
   21ebc:	dc000117 	ldw	r16,4(sp)
   21ec0:	dec00804 	addi	sp,sp,32
   21ec4:	f800283a 	ret

00021ec8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   21ec8:	21000017 	ldw	r4,0(r4)
{
   21ecc:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   21ed0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   21ed4:	29800136 	bltu	r5,r6,21edc <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   21ed8:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21edc:	20c00137 	ldwio	r3,4(r4)
   21ee0:	18ffffec 	andhi	r3,r3,65535
   21ee4:	183ffb26 	beq	r3,zero,21ed4 <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   21ee8:	29400044 	addi	r5,r5,1
   21eec:	28ffffc7 	ldb	r3,-1(r5)
   21ef0:	20c00035 	stwio	r3,0(r4)
   21ef4:	003ff706 	br	21ed4 <altera_avalon_jtag_uart_write+0xc>

00021ef8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   21ef8:	defffe04 	addi	sp,sp,-8
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   21efc:	008666b4 	movhi	r2,6554
{
   21f00:	dc000015 	stw	r16,0(sp)
   21f04:	dfc00115 	stw	ra,4(sp)
  if (big_loops)
   21f08:	10a66604 	addi	r2,r2,-26216
{
   21f0c:	2021883a 	mov	r16,r4
  if (big_loops)
   21f10:	1100162e 	bgeu	r2,r4,21f6c <alt_busy_sleep+0x74>
  big_loops = us / (INT_MAX/
   21f14:	014666b4 	movhi	r5,6554
   21f18:	29666644 	addi	r5,r5,-26215
   21f1c:	0020b5c0 	call	20b5c <__udivsi3>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   21f20:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   21f24:	013999b4 	movhi	r4,58982
    for(i=0;i<big_loops;i++)
   21f28:	0007883a 	mov	r3,zero
      __asm__ volatile (
   21f2c:	297fffc4 	addi	r5,r5,-1
      us -= (INT_MAX/(ALT_CPU_FREQ/
   21f30:	211999c4 	addi	r4,r4,26215
      __asm__ volatile (
   21f34:	297fffc4 	addi	r5,r5,-1
   21f38:	283ffe1e 	bne	r5,zero,21f34 <alt_busy_sleep+0x3c>
    for(i=0;i<big_loops;i++)
   21f3c:	18c00044 	addi	r3,r3,1
      us -= (INT_MAX/(ALT_CPU_FREQ/
   21f40:	8121883a 	add	r16,r16,r4
    for(i=0;i<big_loops;i++)
   21f44:	18bffb16 	blt	r3,r2,21f34 <alt_busy_sleep+0x3c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   21f48:	800490ba 	slli	r2,r16,2
   21f4c:	1421883a 	add	r16,r2,r16
    __asm__ volatile (
   21f50:	843fffc4 	addi	r16,r16,-1
   21f54:	803ffe1e 	bne	r16,zero,21f50 <alt_busy_sleep+0x58>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   21f58:	0005883a 	mov	r2,zero
   21f5c:	dfc00117 	ldw	ra,4(sp)
   21f60:	dc000017 	ldw	r16,0(sp)
   21f64:	dec00204 	addi	sp,sp,8
   21f68:	f800283a 	ret
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   21f6c:	200490ba 	slli	r2,r4,2
   21f70:	1121883a 	add	r16,r2,r4
    __asm__ volatile (
   21f74:	843fffc4 	addi	r16,r16,-1
   21f78:	043ffe16 	blt	zero,r16,21f74 <alt_busy_sleep+0x7c>
   21f7c:	003ff606 	br	21f58 <alt_busy_sleep+0x60>

00021f80 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   21f80:	f800283a 	ret

00021f84 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   21f84:	20000226 	beq	r4,zero,21f90 <alt_dev_llist_insert+0xc>
   21f88:	20800217 	ldw	r2,8(r4)
   21f8c:	10000b1e 	bne	r2,zero,21fbc <alt_dev_llist_insert+0x38>
   21f90:	d0a00517 	ldw	r2,-32748(gp)
   21f94:	10001126 	beq	r2,zero,21fdc <alt_dev_llist_insert+0x58>
{
   21f98:	deffff04 	addi	sp,sp,-4
   21f9c:	dfc00015 	stw	ra,0(sp)
   21fa0:	103ee83a 	callr	r2
  {
    ALT_ERRNO = EINVAL;
   21fa4:	00c00584 	movi	r3,22
   21fa8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   21fac:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   21fb0:	dfc00017 	ldw	ra,0(sp)
   21fb4:	dec00104 	addi	sp,sp,4
   21fb8:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   21fbc:	28800017 	ldw	r2,0(r5)
  entry->previous = list;
   21fc0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   21fc4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   21fc8:	28800017 	ldw	r2,0(r5)
   21fcc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   21fd0:	29000015 	stw	r4,0(r5)
  return 0;  
   21fd4:	0005883a 	mov	r2,zero
   21fd8:	f800283a 	ret
   21fdc:	d0a06504 	addi	r2,gp,-32364
    ALT_ERRNO = EINVAL;
   21fe0:	00c00584 	movi	r3,22
   21fe4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   21fe8:	00bffa84 	movi	r2,-22
}
   21fec:	f800283a 	ret

00021ff0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   21ff0:	defffb04 	addi	sp,sp,-20
   21ff4:	dcc00315 	stw	r19,12(sp)
   21ff8:	dc800215 	stw	r18,8(sp)
   21ffc:	dc400115 	stw	r17,4(sp)
   22000:	dc000015 	stw	r16,0(sp)
   22004:	dfc00415 	stw	ra,16(sp)
   22008:	2027883a 	mov	r19,r4
   2200c:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   22010:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   22014:	00203b40 	call	203b4 <strlen>
   22018:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2201c:	8440091e 	bne	r16,r17,22044 <alt_find_dev+0x54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   22020:	0021883a 	mov	r16,zero
}
   22024:	8005883a 	mov	r2,r16
   22028:	dfc00417 	ldw	ra,16(sp)
   2202c:	dcc00317 	ldw	r19,12(sp)
   22030:	dc800217 	ldw	r18,8(sp)
   22034:	dc400117 	ldw	r17,4(sp)
   22038:	dc000017 	ldw	r16,0(sp)
   2203c:	dec00504 	addi	sp,sp,20
   22040:	f800283a 	ret
    if (!memcmp (next->name, name, len))
   22044:	81000217 	ldw	r4,8(r16)
   22048:	900d883a 	mov	r6,r18
   2204c:	980b883a 	mov	r5,r19
   22050:	00221880 	call	22188 <memcmp>
   22054:	103ff326 	beq	r2,zero,22024 <alt_find_dev+0x34>
    next = (alt_dev*) next->llist.next;
   22058:	84000017 	ldw	r16,0(r16)
   2205c:	003fef06 	br	2201c <alt_find_dev+0x2c>

00022060 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   22060:	f800283a 	ret

00022064 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   22064:	00220f01 	jmpi	220f0 <alt_iic_isr_register>

00022068 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
   22068:	0009303a 	rdctl	r4,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2206c:	00ffff84 	movi	r3,-2
   22070:	20c6703a 	and	r3,r4,r3
   22074:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   22078:	00800044 	movi	r2,1
   2207c:	d0e06917 	ldw	r3,-32348(gp)
   22080:	1144983a 	sll	r2,r2,r5
   22084:	10c4b03a 	or	r2,r2,r3
   22088:	d0a06915 	stw	r2,-32348(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2208c:	d0a06917 	ldw	r2,-32348(gp)
   22090:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
   22094:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   22098:	0005883a 	mov	r2,zero
   2209c:	f800283a 	ret

000220a0 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
   220a0:	0009303a 	rdctl	r4,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   220a4:	00ffff84 	movi	r3,-2
   220a8:	20c6703a 	and	r3,r4,r3
   220ac:	1801703a 	wrctl	status,r3
  alt_irq_active &= ~(1 << id);
   220b0:	00bfff84 	movi	r2,-2
   220b4:	d0e06917 	ldw	r3,-32348(gp)
   220b8:	1144183a 	rol	r2,r2,r5
   220bc:	10c4703a 	and	r2,r2,r3
   220c0:	d0a06915 	stw	r2,-32348(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   220c4:	d0a06917 	ldw	r2,-32348(gp)
   220c8:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
   220cc:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   220d0:	0005883a 	mov	r2,zero
   220d4:	f800283a 	ret

000220d8 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   220d8:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   220dc:	00c00044 	movi	r3,1
   220e0:	1946983a 	sll	r3,r3,r5
   220e4:	1884703a 	and	r2,r3,r2
}
   220e8:	1004c03a 	cmpne	r2,r2,zero
   220ec:	f800283a 	ret

000220f0 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   220f0:	28c00808 	cmpgei	r3,r5,32
   220f4:	1800161e 	bne	r3,zero,22150 <alt_iic_isr_register+0x60>
{
   220f8:	defffe04 	addi	sp,sp,-8
   220fc:	dfc00115 	stw	ra,4(sp)
   22100:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
   22104:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22108:	00bfff84 	movi	r2,-2
   2210c:	8084703a 	and	r2,r16,r2
   22110:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   22114:	280690fa 	slli	r3,r5,3
   22118:	008000b4 	movhi	r2,2
   2211c:	10894704 	addi	r2,r2,9500
   22120:	10c5883a 	add	r2,r2,r3
   22124:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   22128:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2212c:	30000626 	beq	r6,zero,22148 <alt_iic_isr_register+0x58>
   22130:	00220680 	call	22068 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
   22134:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   22138:	dfc00117 	ldw	ra,4(sp)
   2213c:	dc000017 	ldw	r16,0(sp)
   22140:	dec00204 	addi	sp,sp,8
   22144:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   22148:	00220a00 	call	220a0 <alt_ic_irq_disable>
   2214c:	003ff906 	br	22134 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
   22150:	00bffa84 	movi	r2,-22
}
   22154:	f800283a 	ret

00022158 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   22158:	000170fa 	wrctl	ienable,zero
}
   2215c:	f800283a 	ret

00022160 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   22160:	213ffe84 	addi	r4,r4,-6
   22164:	20800428 	cmpgeui	r2,r4,16
   22168:	1000051e 	bne	r2,zero,22180 <alt_exception_cause_generated_bad_addr+0x20>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2216c:	00800044 	movi	r2,1
   22170:	1104983a 	sll	r2,r2,r4
   22174:	10a2c8cc 	andi	r2,r2,35619
   22178:	1004c03a 	cmpne	r2,r2,zero
   2217c:	f800283a 	ret
  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;

  default:
    return 0;
   22180:	0005883a 	mov	r2,zero
  }
}
   22184:	f800283a 	ret

00022188 <memcmp>:
   22188:	0007883a 	mov	r3,zero
   2218c:	30c0021e 	bne	r6,r3,22198 <memcmp+0x10>
   22190:	0005883a 	mov	r2,zero
   22194:	f800283a 	ret
   22198:	20c5883a 	add	r2,r4,r3
   2219c:	18c00044 	addi	r3,r3,1
   221a0:	28cf883a 	add	r7,r5,r3
   221a4:	10800003 	ldbu	r2,0(r2)
   221a8:	39ffffc3 	ldbu	r7,-1(r7)
   221ac:	11fff726 	beq	r2,r7,2218c <memcmp+0x4>
   221b0:	11c5c83a 	sub	r2,r2,r7
   221b4:	f800283a 	ret
